h2. 动作控制器概述

本指南中你将学到控制器的工作原理以及它们在你的应用的请求周期中是怎样协调运行的。阅读本指南后，你将能够：

* 跟踪通过控制器的请求的流向
* 理解为什么及如何在 session 或 cookies 中存储数据
* 在请求处理中使用过滤器执行代码
* 使用动作控制器内建的 HTTP 验证
* 直接流式发送数据到用户的浏览器中
* 过滤敏感参数，使其不会出现在应用的日志中
* 处理在请求处理中抛出的异常

endprologue.

h3. 控制器都做什么？

动作控制器是MVC中的C。在路由决定对某次请求使用哪一个控制器之后，该控制器就负责理解该请求并生成相应的输出。幸运的是，动作控制器为你做了大部分的底层工作并且使用了聪明的约定使得这一切尽可能的简明易懂。

对于最为常规的 "RESTful":http://en.wikipedia.org/wiki/Representational_state_transfer 应用，控制器接收请求（对于开发者来说是隐形的），从某一模型中获取或者保存数据，并且使用某一视图创建 HTML 输出。如果需要控制器做一点不同的事情，也不是问题，这里所说只是最为常见的控制器工作的方式。

控制器因此可以被看作模型和视图之间的中间人。它使得视图可以使用模型的数据，视图就可以显示数据给用户，并且从用户处得到要保存或者更新的数据给到模型。

NOTE: 更多关于路由过程的细节，参考 "深入浅出道路由":routing.html 。

h3. 方法与动作

控制器是一个继承自 +ApplicationController+ 的 Ruby 类别，和其他类别一样有一些方法。当你的应用接受一个请求时，路由会决定执行哪个控制器和动作， Rails 会创建一个该控制器的实例并且执行与动作名称相同的方法。

<ruby>
class ClientsController < ApplicationController
  def new
  end
end
</ruby>

举例来说，如果用户在你的应用中使用 +/clients/new+ 来增加一个新的客户，Rails 会创建一个 +ClientsController+ 实例并执行 +new+ 方法。注意上例中的空方法也会正常工作，因为除非动作有另外的指定，Rails会默认渲染 +new.html.erb+ 视图。通过创建一个新的 +Client+ 实例，+new+ 方法可以使该视图可以使用 +@client+ 实例变量：

<ruby>
def new
  @client = Client.new
end
</ruby>

"版型与渲染指南":layouts_and_rendering.html 对此有更详细的解释。

+ApplicationController+ 继承自定义了很多实用方法的 +ActionController::Base+ ，本指南会涉及其中一些，但是如果你对都有什么方法感到好奇，你可以自行查看 API 文档或在源码中找到所有的方法。

只有公有方法可以被调用为动作。这是一种最佳实践：降低那些本来设计为类似辅助方法或过滤器而不是动作的方法的可见度。

h3. 参数

你很可能会想存取用户或其他参数发来的数据。web 应用中有两种可能的参数。第一种参数是作为URL的一部分被发送来的，叫作查询字符串参数。查询字符串是"?"后的所有东西。第二种参数通常被称为 POST 数据。这些信息通常来自有一个用户填写的 HTML 表单。它被叫作 POST 数据因为它只能作为一个 HTTP POST 请求发送过来。Rails对查询字符串参数和 POST 参数并不做任何区分，在你的控制器中都可以通过 +params+ 哈希来使用。

<ruby>
class ClientsController < ActionController::Base
  # 此动作使用查询字符串参数因为它通过 HTTP GET 请求运行，
  # 但不会造成参数存取方式的任何不同。
  # 此动作的 URL 会看起来像要列出所有已激活的
  # 用户： /clients?status=activated
  def index
    if params[:status] == "activated"
      @clients = Client.activated
    else
      @clients = Client.unactivated
    end
  end

  # 此动作使用 POST 参数。他们有很大可能来自于一个用户
  # 提交的 HTML 表单。此 RESTful 请求的 URL 会为 "/clients"，数据
  # 会作为请求主体的一部分被发送。
  def create
    @client = Client.new(params[:client])
    if @client.save
      redirect_to @client
    else
      # 此行覆盖了默认渲染行为，本来应渲染 "create" 视图。
      render :action => "new"
    end
  end
end
</ruby>

h4. 哈希与数组参数

+params+ 哈希不只局限于一维键值对。它可以包含数组和（嵌套）哈希。通过在键名后附加一对空的方括号可以实现发送一组数组值：

<pre>
GET /clients?ids[]=1&ids[]=2&ids[]=3
</pre>

NOTE: 此例中实际 URL 会被编码为 "/clients?ids%5b%5d=1&ids%5b%5d=2&ids%5b%5d=3" 因为 "[" 和 "]" 不可出现在 URL 中。大多数时候你都不用担心，因为浏览器会帮你处理它，并且当收到请求后 Rails 会解码回去，但是如果你发现你必须手动发送这些请求到服务器的时候需要留意。

+params[:ids]+ 的值现在会是 +["1", "2", "3"]+ 。注意参数值永远是字符串；Rails不会尝试去猜或是强制转型其类型。

通过把键名放在方括号中发送一个哈希：

<html>
<form accept-charset="UTF-8" action="/clients" method="post">
  <input type="text" name="client[name]" value="Acme" />
  <input type="text" name="client[phone]" value="12345" />
  <input type="text" name="client[address][postcode]" value="12345" />
  <input type="text" name="client[address][city]" value="Carrot City" />
</form>
</html>

当这个表单被提交时，+params[:client]+ 的值会是<tt>{"name" => "Acme", "phone" => "12345", "address" => {"postcode" => "12345", "city" => "Carrot City"}}</tt>。注意在 +params[:client][:address]+ 中的嵌套哈希。

注意 +params+ 哈希实际上是来自 Active Support 的 +HashWithIndifferentAccess+ 的一个实例，它表现得像是一个哈希使得你可以互换地使用符号和字符串作为键。

h4. JSON/XML 参数

如果你在建造一个 web service 应用，你可能会发现接收 JSON 或 XML 格式的参数更加舒适。Rails 会自动地转换你的参数到 +params+ 哈希中，这样你就可以存取它就像你使用表单数据一样。

举例来说，如果你发送此 JSON 参数：

<pre>
{ "company": { "name": "acme", "address": "123 Carrot Street" } }
</pre>

你会得到 <tt>params[:company]</tt> as <tt>{ :name => "acme", "address" => "123 Carrot Street" }</tt> 。

同样，如果你在你的初始器中打开 +config.wrap_parameters+ 或者在控制器中调用 +wrap_parameters+ ，你可以安全地忽略 JSON/XML 参数中的根元素。默认情况下，参数会自动复制并包裹到以你控制器名字为键的哈希中。所以上面的参数也可以写为：

<pre>
{ "name": "acme", "address": "123 Carrot Street" }
</pre>

这里假定你在发送数据到 +CompaniesController+ 中，数据将会被包裹进 +:company+ 键中，像这样：

<ruby>
{ :name => "acme", :address => "123 Carrot Street", :company => { :name => "acme", :address => "123 Carrot Street" }}
</ruby>

你可以定制键名或指定你想包裹的参数，参考 "API 文档":http://api.rubyonrails.org/classes/ActionController/ParamsWrapper.html 。

h4. 路由参数

+params+ 哈希总是包含 +:controller+ 和 +:action+ 键，但是你应该使用 +controller_name+ 和 +action_name+ 方法来存取这些值。其他路由定义的各项参数，比如 +:id+ 也可以被使用。举例来说，想象一列用户可以显示激活或未激活。我们可以添加一个路由来在一个 “漂亮的” URL 中获取 +:status+ 参数：

<ruby>
match '/clients/:status' => 'clients#index', :foo => "bar"
</ruby>

在此例中，当一个用户打开 URL +/clients/active+ ，+params["status]+ 会被设定为“激活”。当这个路由被使用时，+params[:foo]+ 也会被设定为 "bar" 就像通过查询字符串传递过来一样。+params[:action]+ 会包含 "index" 。

h4. +default_url_options+

你可以通过定义一个叫作 +default_url_options+ 的方法设定 URL 生成的全局默认参数。该方法必须返回一个希望默认值的哈希，键必须都为符号：

<ruby>
class ApplicationController < ActionController::Base
  def default_url_options
    {:locale => I18n.locale}
  end
end
</ruby>

当生成 URL 时，这些选项会被用为一个起始点，因此它们可以被 +url_for+ 调用中传递的选项重写。

如果你在 +ApplicationController+ 中定义了 +default_url_options+ ，如上例所示，它将会被用于所有的 URL 生成。该方法同样也可以被定义于某一具体的控制器，那样的话，它仅仅影响该控制器的 URL 生成。


h3. Session

你的应用对每一个用户会有一个 session ，你可以在请求之间持久地存储少量数据。session 只有在控制器和视图中可用并且可以使用以下几种存储机制之一：

* ActionDispatch::Session::CookieStore - 存储所有东西在客户端上。
* ActiveRecord::SessionStore - 通过 Active Record 存储数据到数据库库中。
* ActionDispatch::Session::CacheStore - 存储数据在 Rails 的缓存中。
* ActionDispatch::Session::MemCacheStore - 存储数据到 memcached cluster 中（遗留实现；考虑使用 CacheStore 代替）。

所有session 存储使用一个 cookie 为每一个 session 存储一个唯一的 ID （你必须使用 cookie，Rails 不允许你在 URL 中传递 session ID 因为不太安全）。 

对于大多数存储，此 ID 用来在服务器查找 session 数据，例如在数据库表中。有一种例外，并且是默认和推荐的 session 存储 - CookieStore - 存储所有 session 数据在 cookie 本身 （如果你需要 ID， 它一样可用）。这种方法具有非常轻量级的优势并且它在新应用不需要任何设置以使用 session 。为了防止篡改， cookie 数据是经过加密签名的，但是没有经过加密编码，因此任何人可以获取到它就可以读到其内容但是不能编辑（如果它被编辑了 Rails 便不会接受它）。

CookieStore 能存储大约 4kb 的数据 -- 相对其他方法少很多 -- 但通常够用了。在 session 中存储大量数据是不被鼓励的，无论你的应用使用的是何种 session 存储方法。你尤其应该避免在session 中存储复杂对象（任何除基本 Ruby 对象的对象，最常见的例子即模型的实例），因为服务器可能会在请求之间无法重建它们而引起错误。

如果你的用户的 session 不存储关键数据或不需要长时间存在（例如你只是使用 flash 显示提示信息），你可以考虑使用 ActionDispatch::Session::CacheStore。这种方法将会使用你为你的应用配置好的 cache 实现存储 session。这样做的好处是你可以使用已有的cache 基础来存储 session 而不需要任何额外设置或管理。当然坏处是，session 会是昙花一现的并且很可能随时消失。

在 "安全指南":security.html 中阅读更多有关 session 存储的内容。

如果你需要不同的 session 存储机制，你可以在 +config/initializers/session_store.rb+ 文件中改变它：

<ruby>
# 为 session 使用数据库代替默认的基于 cookie 的，不应用于存储高度机密的信息
# （通过 "script/rails g session_migration" 创建 session 表）
# YourApp::Application.config.session_store :active_record_store
</ruby>

Rails 在签名 session 数据时会设定一个 session 键（cookie的名称）。这也可以在 +config/initializers/session_store.rb+ 中改变：

<ruby>
# 当你修改此文件后确定重启你的服务器。

YourApp::Application.config.session_store :cookie_store, :key => '_your_app_session'
</ruby>

你也可以传入一个 +：domain+ 键来指定 cookie 的域名：

<ruby>
# 当你修改此文件后确定重启你的服务器。

YourApp::Application.config.session_store :cookie_store, :key => '_your_app_session', :domain => ".example.com"
</ruby>

Rails 会设置（为CookieStore）一个密钥来签名 session 数据。可以在 +config/initializers/secret_token.rb+ 中改变

<ruby>
# 当你修改此文件后确定重启你的服务器。

# 你的用来验证已签名的 cookie 完整性的密钥。
# 如果你更改密钥，所有旧的已签名 cookie 会无效！
# 确定密钥最少 30 个字符且全部随机，
# 别使用常规词否则你会暴露在字典攻击之下。
YourApp::Application.config.secret_token = '49d3f3de9ed86c74b94ad6bd0...'
</ruby>

NOTE: 在使用 +CookieStore+ 时改变密钥会使所有已有 session 无效化。

h4. 存取 Session

在你的控制器中你可以通过 +session+ 实例方法存取 session。

NOTE: Session 都是惰性加载的。如果你在你的动作代码中没有存取 session ，它们不会被加载的。因此你永远不需要屏蔽 session，只要不存取它们就可以了。

Session 值是像哈希一样的键/值对。

<ruby>
class ApplicationController < ActionController::Base

  private

  # 通过键 :current_user_id 查找含有存储在 session 中的 ID 的 User 。
  # 这是一种在 Rails 应用中处理用户登录的常见方式；登录时设置几组 session 值
  # 然后登出时移除之。
  def current_user
    @_current_user ||= session[:current_user_id] &&
      User.find_by_id(session[:current_user_id])
  end
end
</ruby>

在session中存储某事物，像使用哈希一样把它赋给某键：

<ruby>
class LoginsController < ApplicationController
  # “创建”一个登录，也称“将用户登入” 
  def create
    if user = User.authenticate(params[:username], params[:password])
      # 保存用户 ID 于 session 中于是
      # 就可以在之后的请求中使用它了
      session[:current_user_id] = user.id
      redirect_to root_url
    end
  end
end
</ruby>

在session中移除某事物，赋值给改键 +nil+ ：

<ruby>
class LoginsController < ApplicationController
  # “删除” 一个登录，也称“将用户登出”
  def destroy
    # 从 session 中移除用户 id
    @_current_user = session[:current_user_id] = nil
    redirect_to root_url
  end
end
</ruby>

要重置整个 session, 使用 +reset_session+ 。

h4. 闪存

闪存是session的特殊部分，它在每次请求后清空。这意味着存储的值仅在下一次请求中可用，对于存储错误信息等非常有用。它的存取方式和session大体相同，就像使用哈希。让我们来使用登出动作作为例子。控制器可以发送一条显示在用户的下一次请求中的信息：

<ruby>
class LoginsController < ApplicationController
  def destroy
    session[:current_user_id] = nil
    flash[:notice] = "You have successfully logged out"
    redirect_to root_url
  end
end
</ruby>

注意使用闪存信息来作为重定向也是可以的。

<ruby>
redirect_to root_url, :notice => "You have successfully logged out"
</ruby>


+destroy+ 动作会重定向到应用的 +root_url+ 处，在那里闪存信息会显示。注意将由下一个动作来完全决定对之前的动作放到闪存中的事物做什么。显示最终错误，在应用的版型中提醒闪存信息是一种惯例：

<ruby>
<html>
  <!-- <head/> -->
  <body>
    <% if flash[:notice] %>
      <p class="notice"><%= flash[:notice] %></p>
    <% end %>
    <% if flash[:error] %>
      <p class="error"><%= flash[:error] %></p>
    <% end %>
    <!-- more content -->
  </body>
</html>
</ruby>

通过这种方法，如果一个动作设置了一条错误或提示信息，版型会自动显示它。

如果你想使一个闪存值被带到另一个请求中，使用 +keep+ 方法：

<ruby>
class MainController < ApplicationController
  # 让我们假设此动作对应 root_url ，但是你想要
  # 重定向所有请求到 UsersController#index 。
  # 如果在这里一个动作设置闪存并重定向，
  # 当另一个重定向发生时，值正常情况下会丢失，
  # 但是你可以使用 'keep' 来使其持续到另一个请求。
  def index
    # 将保持所有闪存值。
    flash.keep

    # 你也可以使用键名指定仅保存某类值。
    # flash.keep(:notice)
    redirect_to users_url
  end
end
</ruby>

h5. +flash.now+

默认情况下，添加值到闪存会是它们在下次请求中可用，但是有时你可能想要在同一请求中存取那些值。举例来说，如果 +create+ 动作没能保存一个 resource 而你立即渲染了 +new+ 模版，这不会产生一个新的请求，但是你可能仍然想要使用闪存显示一条信息。要做到这一点，你可以按你使用普通的 +flash+ 的方式使用 +flash.now+ ：

<ruby>
class ClientsController < ApplicationController
  def create
    @client = Client.new(params[:client])
    if @client.save
      # ...
    else
      flash.now[:error] = "Could not save client"
      render :action => "new"
    end
  end
end
</ruby>

h3. Cookies

你的应用可以在客户端存储少量数据 -- 叫作 cookie -- 会在请求间甚至 session间持久存在。Rails 提供了简单的 +cookie+ 存取途径通过 +cookies+ 方法 -- 很像 +session+ -- 像一个哈希一样工作：

<ruby>
class CommentsController < ApplicationController
  def new
    # 如果之前在 cookie 中存储过，则自动填充评论者的名字
    @comment = Comment.new(:name => cookies[:commenter_name])
  end

  def create
    @comment = Comment.new(params[:comment])
    if @comment.save
      flash[:notice] = "Thanks for your comment!"
      if params[:remember_name]
        # 记住评论者的名字。
        cookies[:commenter_name] = @comment.name
      else
        # 删除评论者名字 cookie，如果有的话。
        cookies.delete(:commenter_name)
      end
      redirect_to @comment.article
    else
      render :action => "new"
    end
  end
end
</ruby>

注意删除值时 session 你设置键为 +nil+，删除一个 cookie 值你要使用 +cookies.delete(:key)+。

h3. 渲染 xml 和 json 数据

ActionController 使得渲染 +xml+ 或 +json+ 数据极为简单。如果你使用鹰架生成一个控制器则你的控制器看起来会像这样。

<ruby>
class UsersController < ApplicationController
  def index
    @users = User.all
    respond_to do |format|
      format.html # index.html.erb
      format.xml  { render :xml => @users}
      format.json { render :json => @users}
    end
  end
end
</ruby>

注意到上例代码中是 <tt>render :xml => @users</tt> 而不是 <tt>render :xml => @users.to_xml</tt>。这是因为如果输入不是字符串的话，那么 rails 会自动调用 +to_xml+ 。


h3. 过滤器

过滤器是运行在控制器动作之前，之后，或前后(”around")的方法。

过滤器是被继承的，因此如果你设置一个过滤器在 +ApplicationController+ ，它会在你的应用的每一个过滤器中运行。

前过滤器可能会终止请求周期。一种常见的前过滤器是需要用户登录后动作才会运行。你可以如此定义过滤器方法：

<ruby>
class ApplicationController < ActionController::Base
  before_filter :require_login

  private

  def require_login
    unless logged_in?
      flash[:error] = "You must be logged in to access this section"
      redirect_to new_login_url # halts request cycle
    end
  end

  # logged_in? 方法简单地返回 true 如果用户已登录，否则返回 false 。
  # 它通过使用一个双 ! 操作符来“布尔化”我们之前创建的 current_user 方法。
  # 注意在 Ruby 中者不常见也不鼓励，除非你真的想要转换某物到 true 或 false 。
  def logged_in?
    !!current_user
  end
end
</ruby>

如果用户没有登录，该方法简单地存储一条错误信息在闪存中然后重定向到登录表单。如果在该过滤器之后还有其他更多的过滤器，它们也会被取消。

在此例中过滤器被添加到 +ApplicationController+ 中因此应用中的所有控制器都要继承它。这将使得应用中的所有操作都需要用户已登录才能使用。基于明显的原因（用户最初无法登录），不是所有控制器或动作都应该需要它。在特定的动作中使用 +skip_before_filter+ 你可以阻止这个过滤器运行：

<ruby>
class LoginsController < ApplicationController
  skip_before_filter :require_login, :only => [:new, :create]
end
</ruby>

现在，+LoginController+ 的 +new+ 和 +create+ 动作将会不需要用户已登录也能工作。+:only+ 选项是指仅在指定的动作中跳过过滤器，还有一个 +:except+ 选项正好相反。这些选项也可以被用在添加过滤器时，所以你可以添加一个在建立是就只在选择的动作中运行的过滤器。

h4. 后过滤器与前后过滤器

除了前过滤器以外，你也可以在一个动作被执行之后运行过滤器，或之前和之后都运行。

后过滤器和前过滤器相似，但因为动作已经被运行，它们已经存取过准备发送给客户的响应数据。后过滤器显然不能阻止动作运行。

前后过滤器通过yield来负责运行它们协助的动作，类似 Rack 中间件的工作方式。Around filters are responsible for running their associated actions by yielding, similar to how Rack middlewares work.

举例来说，管理员能轻松预览在一个网站中哪里改变了的一个批准流程 ，只要应用它们到一个事务中:

<ruby>
class ChangesController < ActionController::Base
  around_filter :wrap_in_transaction, :only => :show

  private

  def wrap_in_transaction
    ActiveRecord::Base.transaction do
      begin
        yield
      ensure
        raise ActiveRecord::Rollback
      end
    end
  end
end
</ruby>

注意前后过滤器也包裹了渲染。在实践中，如果上例的视图本身通过一个 scope 或是什么从数据库读取，它会在事务中这么做以呈现数据来预览。

也可以选择不 yield 并自己构建响应，这样动作不会被运行。

h4. 使用过滤器的其他方式

尽管使用过滤器最为常见的方式是创建私有方法然后使用 *_filter 方法添加它们，还有两种其他的方式可以做到同样的事情。

第一种方法是在 *_filter 方法中直接使用一个 block 。 block 接受 controller 为一个参数，使用 block 上例中 +require_login+ 过滤器也可以重写成：

<ruby>
class ApplicationController < ActionController::Base
  before_filter do |controller|
    redirect_to new_login_url unless controller.send(:logged_in?)
  end
end
</ruby>

注意此例中过滤器使用 +send+ 因为 +logged_in?+ 方法是私有的，而过滤器不是运行于控制器的作用域中。此过滤器的这种实现是不被推荐的，但是对于简单一些的情况，它可能很有用。

第二种方式是使用一个类别（事实上，响应正确方法的任何对象就可以）来处理过滤。在更复杂并且在使用其他两种方式时无法做到可读性和重用性时，它非常有用。举例来说，你可以使用类别重写登录过滤器：

<ruby>
class ApplicationController < ActionController::Base
  before_filter LoginFilter
end

class LoginFilter
  def self.filter(controller)
    unless controller.send(:logged_in?)
      controller.flash[:error] = "You must be logged in"
      controller.redirect_to controller.new_login_url
    end
  end
end
</ruby>

再一次，对于这个过滤器，它不是一个理想的例子，因为它不运行于控制器的作用域中而是通过参数传递得到控制器。过滤器类别有一个运行在动作之前或之后的类别方法 +filter+ ，取决于它是一个前过滤器还是后过滤器。被用于前后过滤器的类别也可以使用相同的 +filter+ 方法，它也会同样运行。该方法必须 +yield+ 来执行动作。或者，它可以有一个 +before+ 和一个 +after+ 方法运行于动作之前和之后。

h3. 请求伪造保护

跨站请求伪造是一种一个站点欺骗用户生成在另一个站点的请求的攻击方式，可能会在未经用户知晓或同意的情况下添加，修改或删除站上数据。

避免此攻击的第一步是确保所有“破坏性的”动作（增，改，删）只能通过非 GET 请求来实现。如果你遵循 RESTful 约定那么你已经在这么做了。然而，恶意站点仍然可以轻易发送一个非 GET 请求到你的站点，这就是请求伪造保护介入的时候了。顾名思义，它保护你免受伪造的请求的欺骗。

它做到这个的方法是对每个请求增加一个只被你的服务器知道的、不可猜的标志。这样，如果一个请求没有合适的标志，它会被拒绝接入。

如果你像这样生成一个表单：

<ruby>
<%= form_for @user do |f| %>
  <%= f.text_field :username %>
  <%= f.text_field :password %>
<% end %>
</ruby>

你会看到标志作为一个隐藏的 field 被加到其中:

<html>
<form accept-charset="UTF-8" action="/users/1" method="post">
<input type="hidden"
       value="67250ab105eb5ad10851c00a5621854a23af5489"
       name="authenticity_token"/>
<!-- fields -->
</form>
</html>

Rails 使用 form helpers 添加这个标志到每一个表单，所以大部分时间你都不用担心它。如果你手工书写一个表单或是因为其他原因需要添加标志，可以通过 +form_authenticity_token+ 方法:

+form_authenticity_token+ 生成一个合法的验证标志。对于 Rails 无法自动添加它的地方非常有用，比如定制 Ajax 调用。

"安全指南":security.html 有更多关于此及很多其他你应该关注的在开发网络应用时的安全相关问题。

h3. 请求与响应对象

在每一个控制器中有两个存取器方法指向与请求周期相关的请求和响应对象正在执行中。+request+ 方法包含一个 +AbstractRequest+ 实例，+response+ 方法返回一个代表什么会被发送回去客户端的响应对象。

h4. +request+ 对象

请求对象包含很多关于来自客户端的请求的有用信息。参考 "API 文档":http://api.rubyonrails.org/classes/ActionDispatch/Request.html 获得一份可用方法的完整列表。你可以在这个对象的这些属性中存储：

|_.+request+ 的属性|_.意图|
|host|请求的主机名。|
|domain(n=2)|主机名的前 +n+ 个片段，从右开始（顶级域）。|
|format|客户端请求的内容类型。|
|method|请求使用的 HTTP 方法.|
|get?, post?, patch?, put?, delete?, head?|如果 HTTP 方法是 GET/POST/PATCH/PUT/DELETE/HEAD 返回真。|
|headers|返回一个包含请求相关头部信息的哈希。|
|port|请求使用的端口号（整数）.|
|protocol|返回一个包含协议加 "://" 的字符串，例如 "http://" 。|
|query_string|URL 的查询字符串部分，例如 "?" 后的所有东西。|
|remote_ip|客户端的 IP 地址。|
|url|请求使用的整个 URL 。|

h5. +path_parameters+，+query_parameters+，及 +request_parameters+

Rails 收集所有随请求发送来的参数到 +params+ 哈希中，无论它们是被作为查询字符串或是 POST 主体。请求对象有三个存取器给予你存取这些参数，取决于它们来自哪里。+query_parameters+ 哈希包含作为查询字符串发送来的参数，而 +request+parameters+ 哈希包含作为 POST主体发送来的参数。 +path_parameters+ 哈希包含被路由所识别的、引到特定控制器和动作的路径的参数。

h4. +response+ 对象

响应对象通常不被直接使用，但是它在动作执行中构建并且染发送回用户的数据，不过有时 - 就像一个后过滤器一样 - 直接存取响应可能会有用。一些存取器方法也可以设置，允许你改变它们的值。

|_.+response+ 的属性|_.意图|
|body|被发送回客户端的数据的字符串。通常是 HTML 。|
|status|响应的 HTTP 状态代码，像是 200 表示一个成功的请求或是 404 表示文件未找到。|
|location|客户端被重定向到的 URL， 如果有的话。|
|content_type|响应的内容类型。|
|charset|响应使用的字符集。默认为 "utf-8" 。|
|headers|响应使用的头部信息。|

h5. 设置定制头部信息

如果你想要为一个响应设置定制头部信息，那么 +response.headers+ 就是做这个用的。头部属性是一个映射头部名称到它们值的哈希，Rails 会自动设定其中一些。如果你想要添加或改变一个头部信息，按这种如下方式分配它到 +response.headers+ ：

<ruby>
response.headers["Content-Type"] = "application/pdf"
</ruby>

h3. HTTP 验证

Rails 自带两种内建 HTTP 验证机制：

* 基本验证
* 摘要验证

h4. HTTP 基本验证

HTTP 基本验证是一种被大部分浏览器和其他 HTTP 客户端支持的验证方案。举例来说，考虑一种情况，管理员区域只能通过在浏览器的HTTP基本对话框窗口输入用户名和密码来进入。使用内建验证十分简单，只需要你使用一个方法，+http_basic_authenticate_with+。

<ruby>
class AdminController < ApplicationController
  http_basic_authenticate_with :name => "humbaba", :password => "5baa61e4"
end
</ruby>

把它放到适当的位置，你可以创建继承自 +AdminController+ 使用命名空间的控制器。过滤器会为所有那些控制器中的动作运行，使用 HTTP 基本验证保护它们。

h4. HTTP 摘要验证

HTTP 摘要验证是优于基本验证的因为它不需要客户端发送明文密码经过网络（尽管使用HTTPS的 HTTP 基本验证是安全的）。在 Rails 中使用摘要验证十分简单，只需要使用一个方法，+authenticate_or_request_with_http_digest+。

<ruby>
class AdminController < ApplicationController
  USERS = { "lifo" => "world" }

  before_filter :authenticate

  private

  def authenticate
    authenticate_or_request_with_http_digest do |username|
      USERS[username]
    end
  end
end
</ruby>

如上例中所示，+authenticate_or_request_with_http_digest+ block 只接受一个引数 - 用户名。block会返回密码。 从 +authenticate_or_request_with_http_digest+ 返回 +false+ 或 +nil+ 会导致验证失败。

h3. 流与文件下载

有时候你可能想要发送一个文件到用户以代替渲染一个 HTML 页面。Rails 中所有的控制器都有 +send_data+ 和 +send_file+ 方法，它们都可以流式发送数据到客户端。+send_file+ 是一个方便的方法，它让你提供磁盘上的一个文件名，它会为你流式发送内容到文件。

要流式发送数据到客户端，使用 +send_data+ :

<ruby>
require "prawn"
class ClientsController < ApplicationController
  # 生成一个包含客户信息的 PDF 文档并返回。
  # 用户将使用文件下载得到该 PDF
  def download_pdf
    client = Client.find(params[:id])
    send_data generate_pdf(client),
              :filename => "#{client.name}.pdf",
              :type => "application/pdf"
  end

  private

  def generate_pdf(client)
    Prawn::Document.new do
      text client.name, :align => :center
      text "Address: #{client.address}"
      text "Email: #{client.email}"
    end.render
  end
end
</ruby>

上例中 +download_pdf+ 动作会调用一个实际生成 PDF 文档并返回为字符串的私有方法。该字符串会被流式发送到客户端，成为文件下载并且文件名会建议给用户。有时当发送文件到用户时，你可能不会想让他们下载文件。以图片为例，它可以被内嵌在 HTML 页面中。告知浏览器一个文件意图不是为了下载，你可以设置 +:disposition+ 选项来 "inline" （内嵌）。该选项与之相反的值且为默认值是 "attachment" （附件）。

h4. 发送文件

如果你想要发送一个已在磁盘存在的文件，使用 +send_file+ 方法。

<ruby>
class ClientsController < ApplicationController
  # 流式发送一个已生成并存储在磁盘上的文件。
  def download_pdf
    client = Client.find(params[:id])
    send_file("#{Rails.root}/files/clients/#{client.id}.pdf",
              :filename => "#{client.name}.pdf",
              :type => "application/pdf")
  end
end
</ruby>

这将会一次读取并发送流 4kB，避免立即载入整个文件到内存中。你可以关闭流发送通过 +:stream+ 选项或者通过 +:buffer_size+ 选项调整块大小。

如果 +:type+ 未被指定，会从指定的 +:filname+ 中的文件扩展名猜出。如果内容类型不是注册为该扩展名，<tt>application/octet-stream</tt> 会被使用。

WARNING: 当心使用从客户端而来的数据（params, cookies，其他）来定位文件，因为会有允许某些人取得某些他们不应该看到的文件的权限的安全风险。

TIP: 通过 Rails 流式发送静态文件来代替把它们放在你的 web 服务器的公共文件夹中是不推荐的。让用户直接使用 Apache 或者其他 web 服务器下载文件更有效率，保证请求不会不必要地经过整个 Rails 栈。

h4. RESTful 下载

尽管 +send_data+ 可以工作，如果你正在创建一个有一些文件下载动作的 RESTful 应用，它通常不是必须的。在 REST 术语中，上例中的 PDF 文件可以认为是另一种client 资源的表现。Rails 提供一种简单和十分平滑的方式来实现 "RESTful 下载"。这里是你如何重写该例，使得 PDF 下载是 +show+ 动作的一部分，不需要任何流传输:

<ruby>
class ClientsController < ApplicationController
  # 用户可以请求来接受该资源为 HTML 或 PDF 。
  def show
    @client = Client.find(params[:id])

    respond_to do |format|
      format.html
      format.pdf { render :pdf => generate_pdf(@client) }
    end
  end
end
</ruby>

为使此例工作，你必须添加 PDF MIME 类型到 Rails 中。添加下面一行到 +config/initializers/mime_types.rb+ 中：

<ruby>
Mime::Type.register "application/pdf", :pdf
</ruby>

NOTE: 配置文件不会在每次请求被重载，所以你必须重启服务器来使它们的改动生效。

现在用户可以请求来获得一个 client 的 PDF 版本，只要通过添加 ".pdf" 到 URL中：

<shell>
GET /clients/1.pdf
</shell>

h3. 参数过滤

Rails 为每套环境在 +log+ 文件夹中保留一个日志文件。在 debug 时，对你想知道在你的应用中真正发生了什么极为有用，但是在一个线上的应用中你可能不想每一点点信息都被存入日志文件中。你可以通过添加到应用配置中的 <tt>config.filter_parameters</tt> 后过滤掉特定的请求参数到你的日志文件中。这些参数在日志中会被标记 [FILTERED] 。

<ruby>
config.filter_parameters << :password
</ruby>

h3. 异常处理

很有可能你的应用将会包含 bug 或是抛出一个需要被处理的异常。举例来说，如果用户跟随一个链接到一个数据库中不再存在的 resource ，Active Record 会抛出 +ActiveRecord::RecordNotFound+ 异常。

Rails 的默认异常处理对所有异常会显示一个 "500 Server Error" 信息。如果请求是在本地创建的，一个详细的回溯和一些附加信息会被显示那样你就可以找出什么出错了然后处理它。如果请求是远程的，Rails 会仅仅显示一个简单的 "500 Server Error" 信息给用户，或一个 "404 Not Found" 如果是路由错误或一条记录无法被找到。有时你可能想要定制这些信息如何被捕捉以及它们如何被显示给用户。在一个 Rails 应用中有几个等级的错误处理可用：

h4. 默认 500 和 404 模版

一个生产环境应用默认情况会渲染不是一个 404 就是一个 500 错误信息。这些信息包含在 +public+ 文件夹里的静态 HTML 文件中，分别是 +404.html+ 和 +500.html+。你可以定制这些文件以添加一些额外信息和版型，但是记住它们是静态的；例如，你不能在它们中使用 RHTML 或 版型，只能是简单 HTML。

h4. +rescue_from+

如果你在捕捉错误时想要做一些更具体一点，你可以使用 +rescue_from+，在整个控制器和它的子类别中处理某一种特定类型（或多种）异常。

当一个异常发生时，它会被一个 +rescue_from+ 指令捕捉到，这个异常对象会被传递到处理者那里。处理者可以是一个方法或一个通过 +:with+ 选项传递的 +Proc+ 对象。你也可以直接使用一个 block 来代替一个显式的 +Proc+ 对象。

下面是如何使用 +rescue_from+ 来拦截所有 +ActiveRecord::RecordNotFound+ 错误并做一些处理。

<ruby>
class ApplicationController < ActionController::Base
  rescue_from ActiveRecord::RecordNotFound, :with => :record_not_found

  private

  def record_not_found
    render :text => "404 Not Found", :status => 404
  end
end
</ruby>

当然，此例除了更详尽以外并未对默认的异常处理做任何改进，但是一旦你可以捕捉到所有这些异常，你就可以对它们随心所欲了。举例来说，你可以创建当一个用户对应用的特定区域没有权限是抛出的异常类别：

<ruby>
class ApplicationController < ActionController::Base
  rescue_from User::NotAuthorized, :with => :user_not_authorized

  private

  def user_not_authorized
    flash[:error] = "You don't have access to this section."
    redirect_to :back
  end
end

class ClientsController < ApplicationController
  # 检查该用户具有正确的授权来存取客户。
  before_filter :check_authorization

  # 注意动作如何不用担心所有这些验证的东西。
  def edit
    @client = Client.find(params[:id])
  end

  private

  # 如果该用户未被授权，就抛出异常。
  def check_authorization
    raise User::NotAuthorized unless current_user.admin?
  end
end
</ruby>

NOTE: 某些特定的异常只能被 +ApplicationController+ 类别捕获，因为它们是在控制器被初始化和动作被执行之前抛出的。参考 Pratik Naik 在该主题的 "文章":http://m.onkey.org/2008/7/20/rescue-from-dispatching 获得更多信息。

h3. 强制 HTTPS 协议

有时由于安全原因，你可能想要强制指定的控制器只可通过 HTTPS 协议获得权限。Rails 3.1 之后你可以在你的控制器中使用 +force_ssl+ 方法来强制执行它：

<ruby>
class DinnerController
  force_ssl
end
</ruby>

就像过滤器一样，你也可以传递 +:only+ 和 +:except+ 来只对特定动作使用强制安全连接。

<ruby>
class DinnerController
  force_ssl :only => :cheeseburger
  # or
  force_ssl :except => :cheeseburger
end
</ruby>

请注意如果你发现你自己添加 +force_ssl+ 到很多控制器，你可能发现自己想要强制整个应用使用 HTTPS。那样的话，你可以设置 +config.force_ssl+ 在你的环境文件中。

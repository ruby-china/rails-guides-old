h2. Active Record 校验与回调

本章节将指导你如何将代码逻辑和 Active Record 的生命周期相关联。你将学习如何在数据保存到数据库前对其进行校验，以及如何在 Active Record 对象生命周期的特定时刻进行定制化操作。

阅读完本章节并理解相关概念后，希望你能够：

* 理解 Active Record 对象的生命周期
* 使用 Active Record 内建的校验(Validation)helpers
* 定制自己的校验方法
* 获取和使用校验产生的错误信息
* 创建回调(Callback)方法来响应 Active Record 对象生命周期中的事件
* 创建特殊的类用来封装回调的共同行为 
* 创建观察者(Observers)来在模型类外响应生命周期中的事件

endprologue.

h3. 对象的生命周期

Rails 应用中常用的操作包括对象的创建，更新和销毁。Active Record 提供了方法让你关联到这些<em>对象生命周期</em>，让你可以更好地控制应用和数据。

校验让你确保只有有效数据被储存到数据库中去。回调和观察者允许你在对象状态发生变化前后来触发特定代码逻辑。

h3. 校验的概述

在你接触到 Rails 中验证的过多细节之前，应该在整体上对验证有个了解。

h4. 为什么需要校验？

校验用来确保只有有效的数据可以被保存到数据库。例如，确保用户提供的电子邮件和住址的有效性对于你的应用来讲可能是非常重要的。

有很多方法用来在数据存入数据库之前进行校验，包括数据库约束，客户端校验，控制器级别的校验以及模型级别的校验。

* 数据库约束和/或存储过程的验证机制依赖于特定的数据库， 这导致测试和维护比较困难。但是，如果你的数据库需要提供给第三方应用，那么必要的数据库约束将是很好的策略。另外，数据库级别验证能够安全地处理一些其他验证方法很难实现的情况(如在重负荷数据表中的唯一性约束)。
* 客户段校验很有用，但是如果单独使用，通常来讲不是很可靠。如果是通过 JavaScript 来实现的校验，当用户在浏览器中关闭 Javascript，校验就很容易被绕过。虽然如此，但如果在你的网站中结合其他的校验技术共同使用的话，客户端校验将会非常方便，因为它可以立刻给用户反馈校验结果。
* 控制器级别的校验用起来很方便直观，但是通常会使控制器变得笨重以至于难以测试和维护。所以无论何时， "keep your controllers skinny":http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model 都将是个好主意，他将让你的应用适合长期运行和维护。
* 模型级别的校验最适合用来在保存到数据库前来验证数据的有效性。它不依赖于特定数据库，也不能被客户端绕过，并且方便测试和维护。而且 Rails 让校验变的很容易，因为它提供了内建helpers供常用的校验使用，并同时允许你创建自己的校验方法。

h4. 校验发生在什么时候？

Active Record 对象有两种：一种表示已经存入到数据库表中的一行，另一种则还没有存入到数据库。当你新创建一个对象时，如使用 +new+ 方法，这时这个对象还不属于数据库。一旦你在这个对象上调用 +save+ 方法，它将被保存到指定的数据库表中。Active Record 使用 +new_record?+ 这个实例方法来判断对象是否已经存入数据库。考虑下面这个简单的 Active Record 类：

<ruby>
class Person < ActiveRecord::Base
end
</ruby>

我们可一通过 +rails console+ 的输出来查看它是如何工作的：

<ruby>
>> p = Person.new(:name => "John Doe")
=> #<Person id: nil, name: "John Doe", created_at: nil, :updated_at: nil>
>> p.new_record?
=> true
>> p.save
=> true
>> p.new_record?
=> false
</ruby>

创建和保存一个新对象将会在数据库中执行 SQL +INSERT+ 命令。而更新一个已经存在的记录将会在数据库中执行 SQL +UPDATE+ 命令。校验通常在这些 SQL 命令执行前运行。如过有任何的校验失败，对象将被标记为无效，这样 Active Record 将不会执行 +INSERT+ 或者 +UPDATE+ 操作。这将帮助我们避免将无效数据保存到数据库中。你也可以选择在创建，保存或者更新时执行特定的校验。

CAUTION: Rails 中有很多方法可以修改已经保存到数据库中的对象。其中一些方法会触发校验，另一些方法并不会。这意味着如果我们不注意，仍然有可能将一个无效的对象保存到数据库中去的。

下列方法将会触发校验，并仅当对象通过校验后才会保存到数据库中：

* +create+
* +create!+
* +save+
* +save!+
* +update+
* +update_attributes+
* +update_attributes!+

带有感叹号的方法(如 +save!+)将会在对象未通过校验时抛出异常。不带感叹号的则不会：如 +save+ 和 +update+ 将会返回 +false+，而 +create+ 和 +update+ 将仅仅返回对象。

h4. 跳过校验

下列方法将跳过校验，无论对象是否有效，都将把对象保存到数据库中去。所以必须谨慎使用：

* +decrement!+
* +decrement_counter+
* +increment!+
* +increment_counter+
* +toggle!+
* +touch+
* +update_all+
* +update_attribute+
* +update_column+
* +update_counters+

需要注意的是，当将 +:validate => false+ 作为参数传递给save方法时，+save+ 也可以略过校验。但也请谨慎使用这个技巧。

* +save(:validate => false)+

h4. +valid?+ 和 +invalid?+

Rails 内部使用 +valid?+ 方法用来验证对象是否有效。你也可以直接使用此方法。+valid?+ 会触发所有的校验，当没有检查到任何错误时返回 true，否则返回 false。

<ruby>
class Person < ActiveRecord::Base
  validates :name, :presence => true
end

Person.create(:name => "John Doe").valid? # => true
Person.create(:name => nil).valid? # => false
</ruby>

执行完校验后，所有检查到的错误可以通过调用 +errors+ 方法获取到，它会返回所有错误的集合。因此，如果一个对象在运行完校验后这个错误集合为空，我们就可以认为这个对象是有效的。

需要注意的是通过 +new+ 来实例化一个对象不会报告任何错误，即使这个对象从技术上来讲确实是无效的。因为调用 +new+ 方法并不会运行校验。

<ruby>
class Person < ActiveRecord::Base
  validates :name, :presence => true
end

>> p = Person.new
=> #<Person id: nil, name: nil>
>> p.errors
=> {}

>> p.valid?
=> false
>> p.errors
=> {:name=>["can't be blank"]}

>> p = Person.create
=> #<Person id: nil, name: nil>
>> p.errors
=> {:name=>["can't be blank"]}

>> p.save
=> false

>> p.save!
=> ActiveRecord::RecordInvalid: Validation failed: Name can't be blank

>> Person.create!
=> ActiveRecord::RecordInvalid: Validation failed: Name can't be blank
</ruby>

+invalid?+ 仅仅是 +valid?+ 的反意词。+invlaid?+ 会触发校验，当检查到任何错误时返回 true，否则返回 false。

h4(#validations_overview-errors). +errors[]+

为了验证对象特定的属性是否有效，你可以使用 +errors[:attribute]+。它将返回属性 +:attribute+ 的所有错误。如果这个属性没有任何错误，将返回一个空数组。

这个方法只能在校验_执行后_使用，因为他只是检查并返回错误集合中的值，并不会触发校验。这不同与前面介绍的 +ActiveRecord::Base+invalid?+ 方法，因为他不会验证对象作为一个整体时的有效性。它只是检查对于对象特定的属性是否已经检查到错误。

<ruby>
class Person < ActiveRecord::Base
  validates :name, :presence => true
end

>> Person.new.errors[:name].any? # => false
>> Person.create.errors[:name].any? # => true
</ruby>

在 "Working with Validation Errors":#working_with_validation_errors-errors 章节中，我们将对校验的验错误信息讨论地更深入一些。但现在，先让我们来看看 Rails 内建的校验 helpers。

h3. Validation Helpers

Active Record 提供了很多预定义好的校验 helper，你可以直接拿来使用到你的类声明中。这些 helper 方法提供了很多常用的校验规则。而一旦有校验失败，一个和被校验属性关联的错误信息会被添加到对象的 +errors+ 集合中。

每个 helper 可接受的属性名称数目不限，这意味着我们可以通过一行代码为多个属性添加同一类型的校验。

所有的 helper 方法都可以指定 +:on+ 和 +:message+ 选项，分别用来指定校验何时执行以及当校验失败时，何种错误信息应该被添加到 +errors+ 集合中。+:on+ 的值必须为以下之一：+:save+(默认值)，+:create+，+：update+。而每个校验 helper 也有默认的错误信息，用在当 +:message+ 没有指定时。现在让我们分别来看看 Rails 提供的校验 helper。

h4. +acceptance+

该校验用来验证当表单提交时，用户界面上的 checkbox 已经被选择。比较典型的使用场景是在 用户使用你的应用前，需要确定其已经阅读过并接受你的服务条款，或者其他相似的情况下。 对于 web 应用，这个被接受的状态其实并不一定需要保存到数据库中(如果我们没有在数据库表中建立这个字段，该 helper 将为它创建一个虚拟属性)。

<ruby>
class Person < ActiveRecord::Base
  validates :terms_of_service, :acceptance => true
end
</ruby>

该校验的默认错误信息是 "_must be accepted_"。

该校验可以通过指定 +:accept+ 选项来指定需要被接受选项的值，默认为"1"。

<ruby>
class Person < ActiveRecord::Base
  validates :terms_of_service, :acceptance => { :accept => 'yes' }
end
</ruby>

h4. +validates_associated+

当你的模型和其它的模型有关联，并且关联的模型也需要校验时，应该使用该校验 helper。当你试图保存 Active Record 对象时，它会在所有关联的对象上执行 +valid?+ 方法

<ruby>
class Library < ActiveRecord::Base
  has_many :books
  validates_associated :books
end
</ruby>

该校验可以在所有的关联类型下执行。

CAUTION: 不要在关联的两端同时使用 +validates_associated+ 校验。这会导致相互调用而陷入死循环。

该校验的默认错误信息为 "_is invalid_"。需要注意的是每个关联对象都含有其各自的 +errors+ 集合；+errors+ 集合并不会被绑定到执行此校验的对象上。

h4. +confirmation+

当你有两个文本框，并且需确认他们的内容相同时，可以使用该校验 helper。例如，你需要确认用户输入的电子邮件地址或者密码。该校验方法会创建一个虚拟属性，名称为被确认字段名称后加 "_confirmation"。

<ruby>
class Person < ActiveRecord::Base
  validates :email, :confirmation => true
end
</ruby>

在视图模板中使用如下

<erb>
<%= text_field :person, :email %>
<%= text_field :person, :email_confirmation %>
</erb>

该校验只有当 +email_confirmation+ 不为 +nil+ 的时候才执行。所以为了确保该校验被执行，我们需要为 +email_confirmation+ 添加 presence 校验(稍后我们会介绍 presence 校验)。

<ruby>
class Person < ActiveRecord::Base
  validates :email, :confirmation => true
  validates :email_confirmation, :presence => true
end
</ruby>

该校验的默认错误信息为 "_doesn't match confirmation_"。

h4. +exclusion+

该校验 helper 用来验证属性的值没有包含在给定的集合中。用来校验的集合可以是任意实现了 enumerable 接口的对象。

<ruby>
class Account < ActiveRecord::Base
  validates :subdomain, :exclusion => { :in => %w(www us ca jp),
    :message => "Subdomain %{value} is reserved." }
end
</ruby>

+exclusin+ 校验通过 +:in+ 选项来指定一个集合，用来验证属性的取值不包含在该集合中。你也可以使用 +:in+ 选项的别名 +:within+。上面的例子使用 +:message+ 选项来演示了你可以在错误信息中引用属性的值。

该校验的默认错误信息为 "_is reserved_"。

h4. +format+

该校验用来验证该属性值是否匹配通过 +:with+ 选项指定的正则表达式。

<ruby>
class Product < ActiveRecord::Base
  validates :legacy_code, :format => { :with => /\A[a-zA-Z]+\z/,
    :message => "Only letters allowed" }
end
</ruby>

该校验的默认错误信息为 "_is invalid_"。

h4. +inclusion+

该校验用来验证属性的值是否包含在给定的集合中。该集合可以是任何实现了enumerable 接口的对象。

<ruby>
class Coffee < ActiveRecord::Base
  validates :size, :inclusion => { :in => %w(small medium large),
    :message => "%{value} is not a valid size" }
end
</ruby>

+inclusion+ 校验通过 +:in+ 选项来指定一个集合，用来验证属性的取值不包含在该集合中。你也可以使用 +:in+ 选项的别名 +:within+。上面的例子使用+:message+选项来演示了你可以在错误信息中引用属性的值。

该校验的默认错误信息为 "_is not included in the list_"。

h4. +length+

该校验用来验证属性值的长度。它提供了多种选项来指定长度的约束条件

<ruby>
class Person < ActiveRecord::Base
  validates :name, :length => { :minimum => 2 }
  validates :bio, :length => { :maximum => 500 }
  validates :password, :length => { :in => 6..20 }
  validates :registration_number, :length => { :is => 6 }
end
</ruby>

有以下几种约束选项：

* +:minimum+ - 该属性值的长度不能小于指定的长度。
* +:maximum+ - 该属性值的长度不能大于指定的长度.
* +:in+ (or +:within+) - 该属性值的长度必须包含在指定的区间中。所以这个选项的值必须是 range 对象.
* +:is+ - 该属性值的长度必须等于指定的长度.

该校验的默认错误信息依赖于所执行的长度校验的类型。你可以通过使用 +:wrong_length+，+:too_long+，和 +:too_short+ 选项以及 <tt>%{count}</tt> 作为所使用的相应长度约束的占位符来自由的订制信息。而且你仍然可以使用 +:message+ 选项来指定错误信息.

<ruby>
class Person < ActiveRecord::Base
  validates :bio, :length => { :maximum => 1000,
    :too_long => "%{count} characters is the maximum allowed" }
end
</ruby>

该校验默认通过统计字母个数来计算长度，但是你也可以通过指定 +:tokenizer+ 选项来使用不同的方式分割属性值：

<ruby>
class Essay < ActiveRecord::Base
  validates :content, :length => {
    :minimum   => 300,
    :maximum   => 400,
    :tokenizer => lambda { |str| str.scan(/\w+/) },
    :too_short => "must have at least %{count} words",
    :too_long  => "must have at most %{count} words"
  }
end
</ruby>

需要注意的是默认的错误信息为复数形式(如，"is too short (minimum is %{count} characters)")。因此，当 +:minimum+ 为1的时候，你需要指定一个错误信息或者使用 +validates_presence_of+ 来替换。当 +:in+ 或 +:within+ 的下限为1时，你也需要指定一个错误信息或者在该 +length+ 校验前添加一个 +presence+ 校验。

+size+ 校验是 +length+ 校验的别名。

h4. +numericality+

该校验用来检验属性值仅含有数字。默认会匹配整数和浮点数。可以通过设置 +:only_integer+ 为 true 来使其只匹配整数。

如果你将 +:only_integer+ 设置为 +true+，将使用如下的正则表达式来验证属性值。

<ruby>
/\A[<plus>-]?\d<plus>\Z/
</ruby>

否则，该校验将会尝试将被校验的值先通过 +Float+ 转换为浮点数。

CAUTION: 请注意上面的正则允许以换行符结尾。

<ruby>
class Player < ActiveRecord::Base
  validates :points, :numericality => true
  validates :games_played, :numericality => { :only_integer => true }
end
</ruby>

除过 +:only_integer+ 外，该校验也接受如下的选项来为被校验值添加额外的约束：

* +:greater_than+ - 被校验的属性值必须大于指定的值。该选项的默认错误信息为 "_must be greater than %{count}_"。
* +:greater_than_or_equal_to+ - 被校验的属性值必须大于或等于指定的值。该选项的默认错误信息为 "_must be greater than or equal to %{count}_"。
* +:equal_to+ - 被校验的属性值必须等于指定的值。该选项的默认错误信息为 "_must be equal to %{count}_"。
* +:less_than+ - 被校验的属性值必须小于指定的值。该选项的默认错误信息为 "_must be less than %{count}_"。
* +:less_than_or_equal_to+ - 被校验的属性值必须小于或等于指定的值。该选项的默认错误信息为 "_must be less than or equal to %{count}_"。
* +:odd+ - 设置为 true 时，代表被校验的属性值必须为奇数。该选项的默认错误信息为 "_must be odd_"。
* +:even+ - 设置为 true 时，代表被校验的属性值必须为偶数。该选项的默认错误信息为 "_must be even_"。

该校验的默认错误信息为 "_is not a number_"。

h4. +presence+

该校验用来验证指定的属性不应该为空。其实它使用的是 +blank?+ 方法来判断被校验值是否为 +nil+ 或者是空字符串，即一个字符串为空或者只含有空格。

<ruby>
class Person < ActiveRecord::Base
  validates :name, :login, :email, :presence => true
end
</ruby>

如果你想确定对象之间的某一关联是否存在，应该通过检查关联的外键是否存在，而不是检查关联对象是否存在。

<ruby>
class LineItem < ActiveRecord::Base
  belongs_to :order
  validates :order_id, :presence => true
end
</ruby>

由于 +false.blank?+ 为 true，所以如果想校验一个 boolean 值是否存在，应该使用 <tt>validates :field_name, :inclusion => { :in => [true, false] }</tt>。

该校验的默认错误信息为"_can't be empty_"。

h4. +uniqueness+

该校验用来检查在对象保存到数据库前，该属性值是否惟一。但是该校验并不会在数据库上创建惟一性约束，所以有可能会出现虽然我们想保持数据的惟一性，但是由于使用了不同的数据连接而插入了两个相同值。所以为了避免这样的情况，你必须为 该列在数据库中建立惟一性索引。

<ruby>
class Account < ActiveRecord::Base
  validates :email, :uniqueness => true
end
</ruby>

该校验实际上就是在模型关联的数据表中执行一条SQL语句，使用被校验属性的值进行一次查询。

可以通过 +:scope+ 选项来指定其他的属性来限制惟一性校验：

<ruby>
class Holiday < ActiveRecord::Base
  validates :name, :uniqueness => { :scope => :year,
    :message => "should happen once per year" }
end
</ruby>

还可以通过 +:case_sensitive+ 选项来指定唯一性约束是否是大小写敏感的，默认为 true。

<ruby>
class Person < ActiveRecord::Base
  validates :name, :uniqueness => { :case_sensitive => false }
end
</ruby>

CAUTION: 需要注意的是某些数据库在执行查询时总是大小写敏感的。

该校验的默认错误信息为 "_has already been taken_"。

h4. +validates_with+

该校验helper会将AR对象传递到单独的类中校验。

<ruby>
class Person < ActiveRecord::Base
  validates_with GoodnessValidator
end

class GoodnessValidator < ActiveModel::Validator
  def validate(record)
    if record.first_name == "Evil"
      record.errors[:base] << "This person is evil"
    end
  end
end
</ruby>

NOTE: 错误信息是被添加到+record.errors[:base]+中，而不是某一特定的属性。

+validates_with+ 可以接受一个类或者一个类的数组用来校验。+validates_with+ 没有默认的错误信息，你必须自己在校验中添加适当的错误信息到 Active Record 对象的错误集合中。

声明校验方法时，参数列表中必须有 +record+ 参数，代表被校验的 AR 对象。

何其它的校验一样，+validates_with+ 接受 +:if+, +:unless+ 和 +:on+ 选项。如果你传入除此之外的选项，那么这些选项将作为 +options+ 参数的一部分传递给校验器:

<ruby>
class Person < ActiveRecord::Base
  validates_with GoodnessValidator, :fields => [:first_name, :last_name]
end

class GoodnessValidator < ActiveModel::Validator
  def validate(record)
    if options[:fields].any?{|field| record.send(field) == "Evil" }
      record.errors[:base] << "This person is evil"
    end
  end
end
</ruby>

h4. +validates_each+

该 helper 通过 block 来校验指定的属性。它没有预定义好的校验方法。你必须通过 block 来自己创建相应的校验逻辑，每个被传递给 +validates_each+ 的属性都将被依次校验。如下例中，我们需要确保 name 和 surname 不是以小写字母开头的。

<ruby>
class Person < ActiveRecord::Base
  validates_each :name, :surname do |record, attr, value|
    record.errors.add(attr, 'must start with upper case') if value =~ /\A[a-z]/
  end
end
</ruby>

该 block 接受 record 对象，属性名称和属性值三个参数。你可以在 block 中实现任何的校验逻辑。如果校验失败，你需要添加错误信息到 Active Record 对象中，将该对象标记为无效的。

h3. 常用校验选项 

下面列出了一些常用的校验选项：

h4. +:allow_nil+

+:allow_nil+ 可以在被校验属性值为 +nil+ 的时候跳过校验。

<ruby>
class Coffee < ActiveRecord::Base
  validates :size, :inclusion => { :in => %w(small medium large),
    :message => "%{value} is not a valid size" }, :allow_nil => true
end
</ruby>

TIP: +:allow_nil+ 选项在 presence 校验中将被忽略。

h4. +:allow_blank+

+:allow_blank+ 选项和 +:allow_nil+ 选项很相似。当被校验的值为 +blank?+ 时，譬如 +nil+ 或者空字符串，校验将被跳过。

<ruby>
class Topic < ActiveRecord::Base
  validates :title, :length => { :is => 5 }, :allow_blank => true
end

Topic.create("title" => "").valid?  # => true
Topic.create("title" => nil).valid? # => true
</ruby>

TIP: +:allow_blank+ 选项在 presence 校验中将被忽略。

h4. +:message+

如前所见，你可以通过 +:message+ 选项来指定当校验失败时需要添加到 +errors+ 集合中的错误信息。如果没有使用该选项，Active Record 将会使用校验 helper 各自默认的错误信息。

h4. +:on+

你可以通过 +:on+ 选项来指定何时进行校验。所有内建的校验 helpers 默认在 Active Record 对象 save 的时候运行校验(无论你是新建一个AR对象还是更新它都会执行校验)。如果你想改变校验时机，你可以使用 +:on => :create+ 来指定仅在新建一个 Active Record 对象的时候进行校验，或者使用 +:on => :update+ 来指定仅在更新一个 Active Record 对象的时候进行校验。

<ruby>
class Person < ActiveRecord::Base
  # it will be possible to update email with a duplicated value
  validates :email, :uniqueness => true, :on => :create

  # it will be possible to create the record with a non-numerical age
  validates :age, :numericality => true, :on => :update

  # the default (validates on both create and update)
  validates :name, :presence => true, :on => :save
end
</ruby>

h3. 严格校验

你也可以制定校验为严格，这样当 AR 对象校验失败时总会抛出 +ActiveModel::StrictValidationFailed+ 异常。

<ruby>
class Person < ActiveRecord::Base
  validates :name, :presence => { :strict => true }
end

Person.new.valid?  => ActiveModel::StrictValidationFailed: Name can't be blank
</ruby>

h3. 有条件的校验 

有时你可能想在只有当满足给定的条件后才对 AR 对象进行校验。这时你可以使用 +:if+ 和 +:unless+ 选项来达到这个目的，他们接受一个符号，字符串，+Porc+ 或者一个 +Array+。使用 +:if+ 来指定何时*应该*执行校验，使用 +unless+ 来指定何时*不应该*执行校验。

h4. 使用 Symbol 作为 +:if+ 和 +:unless+ 的参数

你可以在 +:if+ 和 +:unless+ 中通过 symbol 来指定一个的方法的名称，这个方法会在校验前执行。这也是最常用的方法。

<ruby>
class Order < ActiveRecord::Base
  validates :card_number, :presence => true, :if => :paid_with_card?

  def paid_with_card?
    payment_type == "card"
  end
end
</ruby>

h4. 使用 String 作为 +:if+ 和 +:unless+ 的参数

你也可以使用字符串指定一段有效的 Ruby 代码，它将通过 eval 来执行。仅当条件很短的时候建议使用此方式。

<ruby>
class Person < ActiveRecord::Base
  validates :surname, :presence => true, :if => "name.nil?"
end
</ruby>

h4. 使用 Proc 作为 +:if+ 和 +:unless+ 的参数

最后，还可以指定一个 Proc 对象。+Proc+ 对象可以让你将条件写在其内部，而不用单独写一个方法。该方式适用于单行代码。

<ruby>
class Account < ActiveRecord::Base
  validates :password, :confirmation => true,
    :unless => Proc.new { |a| a.password.blank? }
end
</ruby>

h4. 校验按条件分组

有时多个校验以同一个条件为前提，这时 +with_options+ 就派上用场了。

<ruby>
class User < ActiveRecord::Base
  with_options :if => :is_admin? do |admin|
    admin.validates :password, :length => { :minimum => 10 }
    admin.validates :email, :presence => true
  end
end
</ruby>

所有在 +with_options+ 块中的校验将自动添加条件 +:if => :is_admin?+

h4. 组合校验条件

另一方面，当使用了多个条件来判定是否需要执行校验时，+Array+ 对象就派上用场。此外，你还可一在同一个校验中同时使用 +:if+ 和 +:unless+ 来指定条件。

<ruby>
class Computer < ActiveRecord::Base
  validates :mouse, :presence => true,
                    :if => ["market.retail?", :desktop?]
                    :unless => Proc.new { |c| c.trackpad.present? }
end
</ruby>

校验只用在所有的 +:if+ 指定的条件全部评估为 +true+，并且所有 +:unless+ 指定的条件没有任何一个评估为 +true+ 的时候才能执行。

h3. 自定义校验

当内建的校验 helpers 不能满足你的需求时，你可以根据自己的需求来编写自己的校验器或者校验方法。

h4. 自定义校验器

自定义校验器其实就是一个继承了 <tt>ActiveModel::Validator</tt> 的类。该类中必须实现一个 +validate+ 方法，它需要接受一个 AR 对象作为参数并对其进行校验。自定义校验器通过 +validates_with+ 来调用。

<ruby>
class MyValidator < ActiveModel::Validator
  def validate(record)
    unless record.name.starts_with? 'X'
      record.errors[:name] << 'Need a name starting with X please!'
    end
  end
end

class Person
  include ActiveModel::Validations
  validates_with MyValidator
end
</ruby>

给需要校验的单独属性添加自定义校验最便捷的方法是使用 <tt>ActiveModel::EachCalidator</tt>。这种情况下，自定义校验类必须实现一个 +validate_each+ 方法，它接受三个参数：record，attribute 和 value，它们分别代表AR对象实例，被校验的属性和被校验属性的值。

<ruby>
class EmailValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    unless value =~ /\A([^@\s]<plus>)@((?:[-a-z0-9]<plus>\.)+[a-z]{2,})\z/i
      record.errors[attribute] << (options[:message] || "is not an email")
    end
  end
end

class Person < ActiveRecord::Base
  validates :email, :presence => true, :email => true
end
</ruby>

如上例所示，你可以将校验 helpers 和自定义校验结合在一起使用。

h4. 自定义校验方法

你也可以通过创建自定义校验方法来验证模型的状态，并且当对象校验失败无效后添加相应的信息到 +errors+ 对象。你必须使用 +validate+ 类方法，通过 symbols 传入校验方法的方法名来注册自定义校验方法。

你可以传入多个自定义校验的方法名，他们将按照注册顺于依次执行校验。

<ruby>
class Invoice < ActiveRecord::Base
  validate :expiration_date_cannot_be_in_the_past,
    :discount_cannot_be_greater_than_total_value

  def expiration_date_cannot_be_in_the_past
    if !expiration_date.blank? and expiration_date < Date.today
      errors.add(:expiration_date, "can't be in the past")
    end
  end

  def discount_cannot_be_greater_than_total_value
    if discount > total_value
      errors.add(:discount, "can't be greater than total value")
    end
  end
end
</ruby>

默认情况下，当你调用 +valid?+ 时，这些校验总会执行。但可以通过 +:on+ 选项指定 +:create+ 或 +:update+ 来控制何时执行校验。

<ruby>
class Invoice < ActiveRecord::Base
  validate :active_customer, :on => :create

  def active_customer
    errors.add(:customer_id, "is not active") unless customer.active?
  end
end
</ruby>

你可以创建自己的校验 helpers，并且在多个 models 中复用。例如，在一个管理调查问卷的应用，限定某些字段的取值范围到特定的集合中是很必要的：

<ruby>
ActiveRecord::Base.class_eval do
  def self.validates_as_choice(attr_name, n, options={})
    validates attr_name, :inclusion => { { :in => 1..n }.merge!(options) }
  end
end
</ruby>

你只需要给 +ActiveRecord::Base+ 类追加定义一个类方法。将这些代码放到 +config/initializers+ 文件夹中。就可以如下使用它了：

<ruby>
class Movie < ActiveRecord::Base
  validates_as_choice :rating, 5
end
</ruby>

h3. 获取和使用校验错误信息

作为前面提到过的 +valid?+ 和 +invalid?+ 的补充，Rails 还提供了一些方法来配合 +errors+ 集合使用以及用来检查对象的有效性。

下面是最常用的一些方法。你也可以通过 +ActiveModel::Errors+ 文档来查看所有有效的方法。

h4(#working_with_validation_errors-errors). +errors+

该方法返回一个 +ActiveModel::Errors+ 实例变量。它包含了该对象校验后的所有错误信息的哈系，以属性为键，以该属性对应错误信息组成的字符串数组为值。

<ruby>
class Person < ActiveRecord::Base
  validates :name, :presence => true, :length => { :minimum => 3 }
end

person = Person.new
person.valid? # => false
person.errors
 # => {:name => ["can't be blank", "is too short (minimum is 3 characters)"]}

person = Person.new(:name => "John Doe")
person.valid? # => true
person.errors # => []
</ruby>

h4(#working_with_validation_errors-errors-2). +errors[]+

使用 +errors[]+可以查看特定属性的错误信息。它会返回一个包含了该属性对应的所有错误信息组成的字符串数组，每句是一个条错误信息。如果该属性没有相应的错误信息，将返回一个空数组。

<ruby>
class Person < ActiveRecord::Base
  validates :name, :presence => true, :length => { :minimum => 3 }
end

person = Person.new(:name => "John Doe")
person.valid? # => true
person.errors[:name] # => []

person = Person.new(:name => "JD")
person.valid? # => false
person.errors[:name] # => ["is too short (minimum is 3 characters)"]

person = Person.new
person.valid? # => false
person.errors[:name]
 # => ["can't be blank", "is too short (minimum is 3 characters)"]
</ruby>

h4. +errors.add+

通过 +add+ 方法可以手动为特定的属性添加错误信息。你可以使用 +errors.full_messages+ 或者 +errors.to_a+ 方法将错误信息展示在用户的表单上。这些特定的错误信息添加了属性(首字母大写)名称作为前缀。+add+ 方法需要传入属性名称以及错误信息两个参数。

<ruby>
class Person < ActiveRecord::Base
  def a_method_used_for_validation_purposes
    errors.add(:name, "cannot contain the characters !@#%*()_-+=")
  end
end

person = Person.create(:name => "!@#")

person.errors[:name]
 # => ["cannot contain the characters !@#%*()_-+="]

person.errors.full_messages
 # => ["Name cannot contain the characters !@#%*()_-+="]
</ruby>

也可以使用 +[]=+ 达到同样的目的

<ruby>
  class Person < ActiveRecord::Base
    def a_method_used_for_validation_purposes
      errors[:name] = "cannot contain the characters !@#%*()_-+="
    end
  end

  person = Person.create(:name => "!@#")

  person.errors[:name]
   # => ["cannot contain the characters !@#%*()_-+="]

  person.errors.to_a
   # => ["Name cannot contain the characters !@#%*()_-+="]
</ruby>

h4. +errors[:base]+

你也可以将添加的错误信息关联到对象自身整体，而不是特定的某一属性。当你想要表示该对象为无效的，而不在乎它的属性值如何时，可以使用该方法。由于 +errors[:base]+ 是一个数组，所以我们只需要将错误信息直接添加进这个数组就可以了，

<ruby>
class Person < ActiveRecord::Base
  def a_method_used_for_validation_purposes
    errors[:base] << "This person is invalid because ..."
  end
end
</ruby>

h4. +errors.clear+

当你想要清空 +errors+ 集合中的所有错误信息时，可以使用 +clear+ 方法。当然，在一个校验后无效的对象上调用 +errors.clear+ 方法并不能使其变为有效：虽然在调用完该方法后 +errors+ 集合为空，但是下次你再调用 +valid?+ 或者其他试图将该对象保存到数据库的方法时，校验会再执行。而任何校验失败时，错误信息就又会被添加入 +errors+ 集合中。

<ruby>
class Person < ActiveRecord::Base
  validates :name, :presence => true, :length => { :minimum => 3 }
end

person = Person.new
person.valid? # => false
person.errors[:name]
 # => ["can't be blank", "is too short (minimum is 3 characters)"]

person.errors.clear
person.errors.empty? # => true

p.save # => false

p.errors[:name]
 # => ["can't be blank", "is too short (minimum is 3 characters)"]
</ruby>

h4. +errors.size+

+size+ 方法可以返回被校验对象的错误信息总数。

<ruby>
class Person < ActiveRecord::Base
  validates :name, :presence => true, :length => { :minimum => 3 }
end

person = Person.new
person.valid? # => false
person.errors.size # => 2

person = Person.new(:name => "Andrea", :email => "andrea@example.com")
person.valid? # => true
person.errors.size # => 0
</ruby>

h3. 在View中展示校验错误信息 

"DynamicForm":https://github.com/joelmoss/dynamic_form 提供了一些 helpers 可以帮助我们在视图的模板中显示错误信息。

你可以通过在 Gemfile 文件中添加下面这行代码来安装该 gem 包：

<ruby>
gem "dynamic_form"
</ruby>

现在你就可以在试图模板中访问 +error_messages+ 和 +error_messages_for+ 两个 helper 方法了。

h4. +error_messages+ 和 +error_messages_for+

当使用 +form_for+ helper 来创建表单的时候，你可以使用 +error_messages+ 方法在表单上显示当前模型实例的所有校验后的错误信息。

<ruby>
class Product < ActiveRecord::Base
  validates :description, :value, :presence => true
  validates :value, :numericality => true, :allow_nil => true
end
</ruby>

<erb>
<%= form_for(@product) do |f| %>
  <%= f.error_messages %>
  <p>
    <%= f.label :description %><br />
    <%= f.text_field :description %>
  </p>
  <p>
    <%= f.label :value %><br />
    <%= f.text_field :value %>
  </p>
  <p>
    <%= f.submit "Create" %>
  </p>
<% end %>
</erb>

如果你提交了一个空表单，结果会如下图显示的一样：

!images/error_messages.png(Error messages)!

NOTE: 产生的 HTML 可能会和上图显示的不太一样，除非你是使用脚手架来生成代码的。参考 "Customizing the Error Messages CSS":#customizing-error-messages-css.

你同样可以使用 +error_messages_for+  helper 来在视图模板中显示和模型相关的错误信息。如下面所示，我们可以获得和前面例子几乎相同的效果。

<erb>
<%= error_messages_for :product %>
</erb>

显示出的错误信息总是以首字母大写的属性名为前缀，而后才是错误信息本身的内容。

+form.error_messages+ 和 +error_messages_for+ 方法都可以接受参数以定制用来显示错误信息的 +div+ 元素，改变 header 的文字，改变 header 下的信息，我们甚至可以指定 header 元素使用的 HTML 标签。例如：

<erb>
<%= f.error_messages :header_message => "Invalid product!",
  :message => "You'll need to fix the following fields:",
  :header_tag => :h3 %>
</erb>

结果如下：

!images/customized_error_messages.png(Customized error messages)!

但是如果你给这些选项中的任意一个传递了 +nil+，相应片段的整个 +div+ 元素都将不显示。

h4(#customizing-error-messages-css). 定制错误信息的 CSS

用来定制错误信息样式的 CSS 选择器有以下几种：

* +.field_with_errors+ - 表单中错误字段和标签的样式。
* +#error_explanation+ - 包含具体错误信息的 +div+ 元素的样式。
* +#error_explanation h2+ - 包含具体错误信息的 +div+ 元素的标题样式。
* +#error_explanation p+ - +div+ 元素中标题下面防止具体错误信息段落的样式，位于 +div+ 标题的右下方。
* +#error_explanation ul li+ - 各自错误信息对应的列表元素的样式。

如果使用了脚手架来生成代码，将会自动生成文件 +app/assets/stylesheets/scaffolds.css.scss+ ，用来定义如上图中所示的红色风格的样式。

两种 helper 方法都可以使用 +:class+ 和 +:id+ 选项来设置相应的名称。

h4. 自定义错误信息的 HTML

错误字段的 HTML 是通过 +ActionView::Base.field_error_proc+ 来定义的。这个 +Proc+ 需要如下两个参数：

* 一段定义 HTML 标签的字符串。
* 一个 +ActionView::Helpers::InstanceTag+ 实例。

下面是一个简单的示例，我们改变了 Rails 默认总是将所有错误的字段信息显示在表单之前的行为。而是将错误信息包装在一个拥有 +validation-error+ CSS 类的 +span+ 元素中。这里 +input+ 元素不会包装在 +div+ 元素中，这样我们就摆脱了文本字段被红色边框围绕的烦恼。你还可以在 CSS 中通过 +validation-error+ 来进一步定义你想要的样式。

<ruby>
ActionView::Base.field_error_proc = Proc.new do |html_tag, instance|
  errors = Array(instance.error_message).join(',')
  %(#{html_tag}<span class="validation-error">&nbsp;#{errors}</span>).html_safe
end
</ruby>

结果如下：

!images/validation_error_messages.png(Validation error messages)!

h3. 回调简介 

回调就是在对象特定的生命周期可以被调用的方法。通过使用回调，我们可以让代码在 Active Record 对象创建，保存，更新，删除，校验或者从数据库载入时被运行。

h4. 回调注册 

使用回调前，你必须先要注册他们。你可像平常一样声明一个方法，然后使用 macro-style 类方法注册他们为回调：

<ruby>
class User < ActiveRecord::Base
  validates :login, :email, :presence => true

  before_validation :ensure_login_has_a_value

  protected
  def ensure_login_has_a_value
    if login.nil?
      self.login = email unless email.blank?
    end
  end
end
</ruby>

而 macro-style 类方法也可以接受 block。当 block 中的代码比较少的时候可以考虑使用：

<ruby>
class User < ActiveRecord::Base
  validates :login, :email, :presence => true

  before_create do |user|
    user.name = user.login.capitalize if user.name.blank?
  end
end
</ruby>

一般认为将回调方法声明为 protected 或者 private 是比较好的实践。因为一旦我们声明为 public 时，该方法就可以直接在模型外调用，而这破坏了对象封装的原则。

h3. 有效的回调

下面列出了 Acrive Record 中所有的回调，同类型的多个回调其各自的调用顺序如下所示的排列次序：

h4. 创建对象时

* +before_validation+
* +after_validation+
* +before_save+
* +around_save+
* +before_create+
* +around_create+
* +after_create+
* +after_save+

h4. 更新对象时 

* +before_validation+
* +after_validation+
* +before_save+
* +around_save+
* +before_update+
* +around_update+
* +after_update+
* +after_save+

h4. 销毁对象时

* +before_destroy+
* +around_destroy+
* +after_destroy+

CAUTION: +after_save+ 在创建和更新对象是都会运行，但总是在 +after_create+ 和 +after_update+ 之后，而和通过宏注册时的顺序无管。

h4. +after_initialize+ 和 +after_find+

+after_initialize+ 在 Active Record 对象被实例化时调用，无论是通过 +new+  来新建一个对象还是从数据库中载入一个对象。这个方法非常有用，因为可以避免你直接重写 Active Record 的 +initialize+ 方法。

+after_find+ 在从数据库载入 Active Record 对象时被调用。当 +after_find+ 和 +after_initialize+ 同时声明时，+after_find+ 将首先被调用。

+after_initialize+ 和 +after_find+ 回调没有与之对用的 +before_*+ 回调，但他们也是和其他 Active Record 回调一样注册使用。

<ruby>
class User < ActiveRecord::Base
  after_initialize do |user|
    puts "You have initialized an object!"
  end

  after_find do |user|
    puts "You have found an object!"
  end
end

>> User.new
You have initialized an object!
=> #<User id: nil>

>> User.first
You have found an object!
You have initialized an object!
=> #<User id: 1>
</ruby>

h3. 执行回调 

下面的方法会触发回调：

* +create+
* +create!+
* +decrement!+
* +destroy+
* +destroy_all+
* +increment!+
* +save+
* +save!+
* +save(:validate => false)+
* +toggle!+
* +update+
* +update_attribute+
* +update_attributes+
* +update_attributes!+
* +valid?+

另外，+after_find+ 回调只会被下面列出的方法触发：

* +all+
* +first+
* +find+
* +find_all_by_<em>attribute</em>+
* +find_by_<em>attribute</em>+
* +find_by_<em>attribute</em>!+
* +last+

而 +after_initialize+ 回调在每次新AR对象初始化时都会被触发。

h3. 跳过回调 

和校验相同，我们也可以跳过回调。但是这些方法使用是必须多加注意，因为回调中可能含有重要的业务逻辑。在没有完全理解其潜在危险的情况下贸然使用可能会导致无效数据的产生。

* +decrement+
* +decrement_counter+
* +delete+
* +delete_all+
* +find_by_sql+
* +increment+
* +increment_counter+
* +toggle+
* +touch+
* +update_column+
* +update_all+
* +update_counters+

h3. 执行挂起

当你为模型注册回调时，他们将会被放入队列中执行。这个队列中将包括模型所有的校验，所有注册的回调，以及对数据库的操作。

整个回调链封装在一个事务中。如果任何一个 <em>before</em> 回调方法返回 +false+ 或者抛出异常，整个执行链会中止并且回滚；而 <em>after</em> 回调则只会抛出一个异常。

CAUTION: 随意抛出一个异常，可能会中断预期执行的保存逻辑甚至可能导致未知的失败。而抛出 +ActiveRecord::Rollback+ 异常是特地用来通知 Active Record 需要执行回滚操作。而且该异常会在内部捕捉到并不再抛出。

h3. 关联回调 

回调可以和关联一起工作，甚至是通过关联来定义的。例如一个 user 拥有多个 posts。而一个用户的 posts 应到在该用户被销毁是全部删除。我们可以给和 +User+ 模型关联的 +Post+ 模型添加一个 +after_destroy+ 回调：

<ruby>
class User < ActiveRecord::Base
  has_many :posts, :dependent => :destroy
end

class Post < ActiveRecord::Base
  after_destroy :log_destroy_action

  def log_destroy_action
    puts 'Post destroyed'
  end
end

>> user = User.first
=> #<User id: 1>
>> user.posts.create!
=> #<Post id: 1, user_id: 1>
>> user.destroy
Post destroyed
=> #<User id: 1>
</ruby>

h3. 有条件的回调 

和校验相同，我们也可以让回调只有在满足特定的条件时才被触发。我们可以使用 +:if+ 和 +:unless+ 选项，他们接收一个符号(symbol)，字符串，+Proc+ 或者 +Array+ 作为参数。使用 +:if+ 选项来指定在什么条件下回调*应该*被触发。而当你想指定在何种情况下回调*不应该*触发时，请使用 +:unless+ 选项。

h4. 使用+:Symbol+作为+:if+和+:unless+的参数

你可传递给一个 symbol 作为 +:if+ 和 +:unless+ 选项的参数，该 symbol 表示一个断言方法的名称，该方法会在回调发生前调用。当使用 +:if+ 选项时，如果该方法返回 false，回调就不会触发；而当使用 +:unless+ 选项时，如果该方法返回 true，回调就不会被触发。这是最常用的选项。使用这个方式，我们可以注册多个不同的断言方法来确定回调是否应该被触发。

<ruby>
class Order < ActiveRecord::Base
  before_save :normalize_card_number, :if => :paid_with_card?
end
</ruby>

h4. 使用String作为 +:if+和+:unless+的参数

你也可以使用一个字符串作为参数，rails 会使用 +eval+ 执行，因此该字符串必须含有有效的 Ruby 代码。你应该只有当条件判断语句很短的时候才使用该方法。

<ruby>
class Order < ActiveRecord::Base
  before_save :normalize_card_number, :if => "paid_with_card?"
end
</ruby>

h4. 使用+Proc+作为+:if+和+:unless+的参数

最后，我们还可以将一个 +Proc+ 作为 +:if+ 和 +:unless+ 的参数传入。这种情况最适合于判断条件是很短的校验函数，通常是单行时使用。

<ruby>
class Order < ActiveRecord::Base
  before_save :normalize_card_number,
    :if => Proc.new { |order| order.paid_with_card? }
end
</ruby>

h4. 回调前有多个条件判断

当写有条件的回调时，可以将 +:if+ 和 +:unless+ 在同一个声明中同时混合使用：

<ruby>
class Comment < ActiveRecord::Base
  after_create :send_email_to_author, :if => :author_wants_emails?,
    :unless => Proc.new { |comment| comment.post.ignore_comments? }
end
</ruby>

h3. 回调类

有时候，你写的一些回调十分有用甚至可以重用到其他的模型中。而 Active Record 可以让我们方便的将回调方法封装起来，以方便我们日后重用。

这里的例子中，我们为 +PictureFile+ 模型创建了一个含有 +after_destroy+ 回调的类：

<ruby>
class PictureFileCallbacks
  def after_destroy(picture_file)
    if File.exists?(picture_file.filepath)
      File.delete(picture_file.filepath)
    end
  end
end
</ruby>

如上所示，我们在类内部声明的回调方法需要接受一个模型对象作为参数。现在我们可以如下所示在模型中使用该回调：

<ruby>
class PictureFile < ActiveRecord::Base
  after_destroy PictureFileCallbacks.new
end
</ruby>

需要注意的是我们需要实例化一个 +PictureFileCallbacks+ 对象，因为我们声明的回调是实例方法。当我们需要使用该实例对象的状态时，这就会很有用。通常来讲，将回调声明为一个类方法更加方便一些：

<ruby>
class PictureFileCallbacks
  def self.after_destroy(picture_file)
    if File.exists?(picture_file.filepath)
      File.delete(picture_file.filepath)
    end
  end
end
</ruby>

如果回调如上面一样声明为类方法，就不需要实例化 +PictureFileCallbacks+ 对象了。

<ruby>
class PictureFile < ActiveRecord::Base
  after_destroy PictureFileCallbacks
end
</ruby>

回调类中，声明的回调方法的数量是不限制的。

h3. 观察者 

观察者类似于回调，但是他们之间又有很重要的区别。回调会给模型中引入和模型没有直接关系的代码，而观察者则可以在不更改模型代码的条件下可以达到相同的目的。例如，+User+ 模型不应该包含发送注册确认邮件的代码。所以当你使用的回调写了和模型不直接相关的代码时，你可能应该考虑使用观察者来代替它。

h4. 创建观察者 

例如，我们想在每位新用户被创建的时候，都会发送一封确认邮件。但是发送确认邮件并非和用户模型逻辑直接相关，所以我们应该创建一个观察者来实现这部分功能。

<shell>
$ rails generate observer User
</shell>

上面的命令会生成包含 +UserObserver+ 类的 +app/models/user_observer.rb+ 文件：

<ruby>
class UserObserver < ActiveRecord::Observer
end
</ruby>

添加在适当时间需要被调用的方法：

<ruby>
class UserObserver < ActiveRecord::Observer
  def after_create(model)
    # code to send confirmation email...
  end
end
</ruby>

和回调类一样，观察者类中的方法也是接收被观察的模型对象作为参数。

h4. 注册观察者

观察者通常放置在 +app/models+ 文件夹下面，并在 +config/application.rb+ 文件中注册。例如，上面的 +UserObserver+ 应该保存为 +app/models/user_observer.rb+ 文件并在文件 +config/application.rb+ 中如下注册：

<ruby>
# 注册激活后的观察者会一直运行下去。 
config.active_record.observers = :user_observer
</ruby>

通常来说，+config/environments+ 中配置的优先级高于在 +config/application.rb+ 中的配置。所以，如果你并不想让观察者在所有的环境下运行，只需要在指定的环境文件中配置即可。

h4. 分享观察者 

默认情况下，Rails 仅通过“观察者”的名称确定需要观察的模型。但是，观察者也可以被用来给多个模型添加同一行为，我们可以明确的指定需要观察的多个模型：

<ruby>
class MailerObserver < ActiveRecord::Observer
  observe :registration, :user

  def after_create(model)
    # code to send confirmation email...
  end
end
</ruby>

本例中，当 +Registration+ 或 +User+ 被创建后，+after_create+ 方法便会被调用。需要注意的是，这个新建的 +MailerObserver+ 需要在 +config/application.rb+ 中注册后才能生效：

<ruby>
# 注册激活后的观察者会一直运行下去。 
config.active_record.observers = :mailer_observer
</ruby>

h3. 事务回调

还有两个回调是在完成一次数据库事务操作后被触发的：+after_commit+ 和 +after_rollback+。这两个回调和 +after_save+ 很相似，只不过他们直到数据库操做成功完成或者失败后回滚完成后才被触发。当你的 AR 模型需要和不属于数据库事务的外部系统打交道时会非常的有用。

考虑如下场景，前面的示例中 +PictureFile+ 模型需要在被销毁时删除和他关联的图片文件。如果在 +after_destroy+ 回调之后发生任何异常，事务回滚，但是图片文件已经被删除而且无法恢复，这就会导致模型数据不一致。例如，假设下面代码中的 +picture_file_2+ 是无效的，当我们执行 +save!+ 方法时会抛出错误。

<ruby>
PictureFile.transaction do
  picture_file_1.destroy
  picture_file_2.save!
end
</ruby>

我们可以在这种情况下使用 +after_commit+ 回调。

<ruby>
class PictureFile < ActiveRecord::Base
  attr_accessor :delete_file

  after_destroy do |picture_file|
    picture_file.delete_file = picture_file.filepath
  end

  after_commit do |picture_file|
    if picture_file.delete_file && File.exist?(picture_file.delete_file)
      File.delete(picture_file.delete_file)
      picture_file.delete_file = nil
    end
  end
end
</ruby>

当模型在一个事务中被创建，更新或者销毁时，+after_commit+ 和 +after_rollback+ 回调被确保会被调用。如果这些回调中的任何一个抛出异常，他们会被忽略并且不会干涉其它的回调。所以，如果你的回调代码中可能抛出异常，你就需要在回调中捕获并适当的处理它。

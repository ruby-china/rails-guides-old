h2. Ruby on Rails 升级教程

该教程提供了一些步骤让你参照着升级你的应用程序到一个新的 Ruby on Rails 版本。这些步骤同样适用于个人发布教程。
endprologue.

h3. 一般建议

在企图升级一个已存在的应用程序之前，你应该确保你有一个很好的升级理由。你需要去权衡多方面因素：举几个例子来说，是否需要新特性，老代码查找帮助越来越难，还有你可利用的时间和技能。

h4(#general_test). 测试覆盖率

在你开始升级之前，为了确保你的应用在升级之后仍然能够工作，最好的方式是让你的应用程序拥有好的测试覆盖率。如果你没有自动化测试来检查你应有的大部分程序，你就需要花时间来手动检查所有改变的部分。在升级 Rails 这种情况下，这将意味着要测试应用程序的每个功能。帮帮你自己的忙，确保在你开始升级之前你的测试覆盖率是好的。

h4(#general_ruby). Ruby 版本

Rails 发布时一般贴近 Ruby 的最新版本:

* Rails 3 和之前的版本要求 Ruby 1.8.7或者更高的版本。之前所支持的 Ruby 版本已经被正式放弃，你需要尽快升级。
* Rails 3.2.x 将是支持 Ruby 1.8.7 的最新分支。
* Rails 4 将只支持 Ruby 1.9.3。

TIP: Ruby 1.8.7 p248 和 p249 有同样的 bug 会使 Rails 崩溃。Ruby 企业版在 1.8.7-2010.02的发布中已经修复这些 bug。在 1.9 系列中, Ruby 1.9.1 因为彻底的段错误而不可用，所以你如果想使用 1.9.x，为了一切顺利请跳到 1.9.2 或 1.9.3。

h3. 升级从 Rails 3.2 到 4.0

NOTE: 本节是一项进展中的工作。

如果你的应用程序是使用 Rails 3.2.x 之前的版本，在你升级到 Rails 4.0之前请先升级到 Rails 3.2。

接下来的修改是为了升级你的应用程序到 Rails 4.0。

h4(#plugins4_0). vendor/plugins

Rails 4.0 不再支持从<tt>vendor/plugins</tt>中加载插件。你必须通过提取它们为 gems 并将它们添加到你的 Gemfile来取代所有插件。如果你选择不把它们做成 gems，你可以将它们放进<tt>lib/my_plugin/*<tt>，并添加一个适当的初始化器在 <tt>config/initializers/my_plugin.rb</tt>中。

h4(#identity_map4_0). IdentityMap

由于"关联上的不一致"：https://github.com/rails/rails/commit/302c912bf6bcd0fa200d964ec2dc4a44abe328a6，Rails 4.0 已经从<tt>ActiveRecord</tt>中去除了<tt>IdentityMap</tt>。如果你手工让它在你的应用程序中可用，你将不得不移除下面的配置，这样才不会有影响：<tt>config.active_record.identity_map</tt>。

h3. 升级从 Rails 3.1 到 3.2

如果你的应用程序是使用 Rails 3.1.x 之前的版本，在你升级到 Rails 3.2之前请先升级到 Rails 3.1。

接下来的修改为了让你的应用程序升级到 Rails 3.2.2，Rails 3.2.x 的最新版本。

h4(#gemfile3_2). Gemfile

在你的 +Gemfile+ 中做以下修改。

<ruby>
gem 'rails', '= 3.2.2'

group :assets do
  gem 'sass-rails',   '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'
  gem 'uglifier',     '>= 1.0.3'
end
</ruby>

h4(#config_dev3_2). config/environments/development.rb

这里还有一些新的配置项你需要添加到你的开发环境:

<ruby>
# Raise exception on mass assignment protection for Active Record models
config.active_record.mass_assignment_sanitizer = :strict

# Log the query plan for queries taking more than this (works
# with SQLite, MySQL, and PostgreSQL)
config.active_record.auto_explain_threshold_in_seconds = 0.5
</ruby>

h4(#config_test3_2). config/environments/test.rb

<tt>mass_assignment_sanitizer</tt>配置项也要添加到<tt>config/environments/test.rb</tt>中:

<ruby>
# Raise exception on mass assignment protection for Active Record models
config.active_record.mass_assignment_sanitizer = :strict
</ruby>

h4(#plugins3_2). vendor/plugins

Rails 3.2 不赞成<tt>vendor/plugins</tt>，Rails 4.0 将完全移除它们。虽然它不是 Rails 3.2 升级必须的一部分，但你可以通过提取它们为 gems 来替代任何插件并将它们添加到你的 Gemfile。如果你选择不将它们做成 gems，你可以将它们放进<tt>lib/my_plugin/*</tt>，并添加一个适当的初始化器在 <tt>config/initializers/my_plugin.rb</tt>中。

h3. 升级从 Rails 3.0 到 3.1

如果你的应用程序是使用 Rails 3.0.x 之前的版本，在你升级到 Rails 3.1之前请先升级到 Rails 3.0。

接下来的修改为了让你的应用程序升级到 Rails 3.1.3，Rails 3.1.x 的最新版本。

h4(#gemfile3_1). Gemfile

在你的 +Gemfile+ 中做以下修改。

<ruby>
gem 'rails', '= 3.1.3'
gem 'mysql2'

# Needed for the new asset pipeline
group :assets do
  gem 'sass-rails',   "~> 3.1.5"
  gem 'coffee-rails', "~> 3.1.1"
  gem 'uglifier',     ">= 1.0.3"
end

# jQuery is the default JavaScript library in Rails 3.1
gem 'jquery-rails'
</ruby>

h4(#config_app3_1). config/application.rb

asset pipeline 需要以下额外的设置：

<ruby>
config.assets.enabled = true
config.assets.version = '1.0'
</ruby>

如果你的应用程序正在使用一个"/assets"路径的资源，你可能要改变 assets 前缀来避免冲突：

<ruby>
# Defaults to '/assets'
config.assets.prefix = '/asset-files'
</ruby>

h4(#config_dev3_1). config/environments/development.rb

移除 RJS 设置<tt>config.action_view.debug_rjs = true</tt>。

如果你启用了 asset pipeline，你需要添加这些配置：

<ruby>
# Do not compress assets
config.assets.compress = false

# Expands the lines which load the assets
config.assets.debug = true
</ruby>

h4(#config_prod3_1). config/environments/production.rb

再一次，下面的大部分修改是为了 asset pipeline。你可以在"Asset Pipeline"中阅读到更多信息：asset_pipeline.html guide。

<ruby>
# Compress JavaScripts and CSS
config.assets.compress = true

# Don't fallback to assets pipeline if a precompiled asset is missed
config.assets.compile = false

# Generate digests for assets URLs
config.assets.digest = true

# Defaults to Rails.root.join("public/assets")
# config.assets.manifest = YOUR_PATH

# Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)
# config.assets.precompile += %w( search.js )

# Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
# config.force_ssl = true
</ruby>

h4(#config_test3_1). config/environments/test.rb

你可以添加这些额外的配置到你的测试环境来帮助你测试性能：

<ruby>
# Configure static asset server for tests with Cache-Control for performance
config.serve_static_assets = true
config.static_cache_control = "public, max-age=3600"
</ruby>

h4(#config_wp3_1). config/initializers/wrap_parameters.rb

如果你希望封装参数到一个内嵌 hash, 在这个文件中添加以下内容，。在新的应用程序中这是默认情况。

<ruby>
# Be sure to restart your server when you modify this file.
# This file contains settings for ActionController::ParamsWrapper which
# is enabled by default.

# Enable parameter wrapping for JSON. You can disable this by setting :format to an empty array.
ActiveSupport.on_load(:action_controller) do
  wrap_parameters :format => [:json]
end

# Disable root element in JSON by default.
ActiveSupport.on_load(:active_record) do
  self.include_root_in_json = false
end
</ruby>

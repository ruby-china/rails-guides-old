h2. Rails on Rack

本指南涵盖 Rails 与 Rack 及其他 Rack 组件的集成。参考本指南，你将能够：

* 创建 Rails Metal 应用
* 在你的 Rails 应用中使用 Rack 中间件
* 理解 Action Pack 的内部中间件堆栈
* 定义定制的中间件堆栈

endprologue.

WARNING: 本指南假定 Rack 协议及 Rack 概念例如中间件、url 映射和 +Rack::Builder+ 。

h3. Rack 简介

bq. Rack 为开发 Ruby web 应用提供了一个最小的模块化和适应性接口。通过对 HTTP 请求与响应 的尽可能最简单的方式包装，它统一和提炼 Web 服务器 ，Web 框架，和之间的软件（所谓的中间件）的 API 为单一方法调用。

- "Rack API 文档":http://rack.rubyforge.org/doc/

解释 Rack 并不在本指南的范围内。以防你不熟悉 Rack 的基础，你应该参考下面的"资源":#resources 一节。

h3. Rails on Rack

h4. Rails 应用的 Rack 对象

<tt>ActionController::Dispatcher.new</tt> 是一个 Rails 应用的主要 Rack 应用对象。任何 Rack 兼容的 Web 服务器应使用 +ActionController::Dispatcher.new+ 对象作为 Rails 应用。

h4. +rails server+

<tt>rails server</tt> 做了创建一个 +Rack::Builder+ 对象和启动 web 服务器的基本工作。这是 Rails 的相当于 Rack 的 +rackup+ 脚本。

下面是如何使用 +rails server+ 创建一个  +Rack::Builder+ 实例

<ruby>
app = Rack::Builder.new {
  use Rails::Rack::LogTailer unless options[:detach]
  use Rails::Rack::Debugger if options[:debugger]
  use ActionDispatch::Static
  run ActionController::Dispatcher.new
}.to_app
</ruby>

以上使用中间件的代码中主要在开发环境中有用。下表说明它们的用法：

|_.中间件|_.用途|
|+Rails::Rack::LogTailer+|追加日志文件输出到控制台|
|+ActionDispatch::Static+|提供 +Rails.root/public+ 目录内的静态文件|
|+Rails::Rack::Debugger+|启动调试器|

h4. +rackup+

使用 +rackup+ 而不是 Rails 的 +rails server+ ，你可以把下面的 +config.ru+ 放在 Rails 应用的根目录内：

<ruby>
# Rails.root/config.ru
require "config/environment"

use Rails::Rack::LogTailer
use ActionDispatch::Static
run ActionController::Dispatcher.new
</ruby>

并启动服务器：

<shell>
$ rackup config.ru
</shell>

更多其他 +rackup+ 选项：

<shell>
$ rackup --help
</shell>

h3. 动作控制器中间件堆栈

许多行动控制器的内部组件是作为 Rack 中间件实现的。 +ActionController::Dispatcher+ 使用 +ActionController::MiddlewareStack+ 结合各种内部和外部的中间件，形成一个完整的 Rails Rack 应用。

NOTE: Rails 的 +ActionController::MiddlewareStack+ 相当于 +Rack::Builder+ ，但具有更好的灵活性和更多的功能，以满足 Rails 的需求。

h4. 检查中间件堆栈

Rails 为检查中使用的中间件堆栈提供了方便的 rake task ：

<shell>
$ rake middleware
</shell>

对于一个新生成的 Rails 应用，可能会有类似输出：

<ruby>
use ActionDispatch::Static
use Rack::Lock
use ActiveSupport::Cache::Strategy::LocalCache
use Rack::Runtime
use Rails::Rack::Logger
use ActionDispatch::ShowExceptions
use ActionDispatch::DebugExceptions
use ActionDispatch::RemoteIp
use Rack::Sendfile
use ActionDispatch::Callbacks
use ActiveRecord::ConnectionAdapters::ConnectionManagement
use ActiveRecord::QueryCache
use ActionDispatch::Cookies
use ActionDispatch::Session::CookieStore
use ActionDispatch::Flash
use ActionDispatch::ParamsParser
use Rack::MethodOverride
use ActionDispatch::Head
use ActionDispatch::BestStandardsSupport
run Blog::Application.routes
</ruby>

每个中间件的用途在"内部中间件":#internal-middleware-stack 一节中解释。

h4. 配置中间件堆栈

Rails 提供了一个简单的配置接口 +config.middleware+ 来添加，删除和修改在中间件堆栈中的中间件，通过 +application.rb+ 或特定环境配置文件 <tt>environments/&lt;environment&gt;.rb</tt> 。

h5. 添加一个中间件

你可以添加一个新的中间件到中间件堆栈中，使用下列任何一种方法：

* <tt>config.middleware.use(new_middleware, args)</tt> - 添加新的中间件到中间件栈底。

* <tt>config.middleware.insert_before(existing_middleware, new_middleware, args)</tt> - 添加新的中间件到指定的中间件堆栈中现有的中间件前。

* <tt>config.middleware.insert_after(existing_middleware, new_middleware, args)</tt> - 添加新的中间件到指定的中间件堆栈中现有的中间件后。

<ruby>
# config/application.rb

# 将 Rack::BounceFavicon 推到栈底
config.middleware.use Rack::BounceFavicon

# 添加 Lifo::Cache 到 ActiveRecord::QueryCache 之后
# 传递 { :page_cache => false } 参数到 Lifo::Cache.
config.middleware.insert_after ActiveRecord::QueryCache, Lifo::Cache, :page_cache => false
</ruby>

h5. 交换中间件

你可以使用 +config.middleware.swap+ 交换现有的中间件中间件堆栈。

<ruby>
# config/application.rb

# 替换 ActionController::Failsafe 为 Lifo::Failsafe
config.middleware.swap ActionController::Failsafe, Lifo::Failsafe
</ruby>

h5. 中间件堆栈是一个数组

中间件堆栈的行为就像一个正常的 +Array+ 。你可以使用任何 +Array+ 方法来插入，重新排列，或从堆栈中删除项目。在上一节所述的方法是只是便捷的方法。

例如，下面语句删除匹配所提供类名的中间件：

<ruby>
config.middleware.delete(middleware)
</ruby>

h4. 内部中间件

动作控制器的功能，大部分是作为中间件实现。下表说明了它们各自的用途：

|_.中间件|_.用途|
|+Rack::Lock+|设定 <tt>env["rack.multithread"]</tt> 标志为 +true+ 并包裹应用到一个 Mutex 中。|
|+ActionController::Failsafe+|如果一个分发时抛出异常，返回 HTTP 状态 +500+ 到客户端。|
|+ActiveRecord::QueryCache+|启用 Active Record 查询缓冲。|
|+ActionDispatch::Session::CookieStore+|使用基于 cookie 的会话存储。|
|+ActionDispatch::Session::CacheStore+|使用基于 Rails 缓存的会话存储。|
|+ActionDispatch::Session::MemCacheStore+|使用基于 memcached 的会话存储。|
|+ActiveRecord::SessionStore+|使用基于数据库的会话存储。|
|+Rack::MethodOverride+|基于 +_method+ 参数或 <tt>env["HTTP_X_HTTP_METHOD_OVERRIDE"]</tt> 设定 HTTP 方法。|
|+Rack::Head+|如果客户端发送 +HEAD+ 请求则丢弃响应体。|

TIP: 您可以使用任意上述中间件在您的定制 Rack 堆栈中。

h4. 定制内部中间件堆栈

使用自定义堆栈取代整个中间件堆栈是可能的，<tt>ActionController::Dispatcher.middleware=</tt> 。

把下面的内容放入 initializer 中：

<ruby>
# config/initializers/stack.rb
ActionController::Dispatcher.middleware = ActionController::MiddlewareStack.new do |m|
  m.use ActionController::Failsafe
  m.use ActiveRecord::QueryCache
  m.use Rack::Head
end
</ruby>

现在检查中间件堆栈：

<shell>
$ rake middleware
(in /Users/lifo/Rails/blog)
use ActionController::Failsafe
use ActiveRecord::QueryCache
use Rack::Head
run ActionController::Dispatcher.new
</shell>

h4. 使用 Rack Builder

下面显示了如何替换使用 +Rack::Builder+ ，而不是 Rails 提供的 +MiddlewareStack+ 。

<strong>清除现有的 Rails 中间件堆栈</strong>

<ruby>
# config/application.rb
config.middleware.clear
</ruby>

<br />
<strong>添加一个 +config.ru+ 文件到 +Rails.root+</strong>

<ruby>
# config.ru
use MyOwnStackFromScratch
run ActionController::Dispatcher.new
</ruby>

h3. 资源

h4. 学习 Rack

* "Rack 官方网站":http://rack.github.com
* "Rack 简介":http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html
* "Ruby on Rack #1 - Hello Rack!":http://m.onkey.org/ruby-on-rack-1-hello-rack
* "Ruby on Rack #2 - The Builder":http://m.onkey.org/ruby-on-rack-2-the-builder

h4. 理解中间件

* "Rack 中间件的 Railscast":http://railscasts.com/episodes/151-rack-middleware

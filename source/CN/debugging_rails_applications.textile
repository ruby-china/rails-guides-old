h2. 调式 Rails 应用

该部分介绍调试Ruby on Rails应用的各种技术。通过参考这份文档你能够:

* 理解调试的目的
* 如何跟踪应用中那些通过测试不能确定的问题
* 学习调式的不同方法
* 分析堆栈记录

endprologue.

h3. 查看Helper进行调式

一个常见的任务就是检查一个变量的内容. 在Rails中，你可以通过以下三种方法:

* +debug+
* +to_yaml+
* +inspect+


h4. +debug+ 
+debug+ 会返回一个&lt;pre&gt;-标记, 这个标记会以YAML的格式来显示指定的对象。 它会从任意对象生成可读的数据格式。比如，如果在视图中包含下面的代码:

<html>
<%= debug @post %>
<p>
  <b>Title:</b>
  <%=h @post.title %>
</p>
</html>

你会看到类似如下的内容:

<yaml>
--- !ruby/object:Post
attributes:
  updated_at: 2008-09-05 22:55:47
  body: It's a very helpful guide for debugging your Rails app.
  title: Rails debugging guide
  published: t
  id: "1"
  created_at: 2008-09-05 22:55:47
attributes_cache: {}


Title: Rails debugging guide
</yaml>

h4. +to_yaml+

可以通过这个方法，以YAML显示一个实例变量,或者其它对象以及其它方法：

<html>
<%= simple_format @post.to_yaml %>
<p>
  <b>Title:</b>
  <%=h @post.title %>
</p>
</html>

首先 +to_yaml+ 方法将其转化为YAML格式,使其更具有可读性;然后通过 +simple_format+ 方法在终端中显示每一行内容。 这就是 +debug+ 方法如何工作的神奇之处。

作为结果，你的视图中将会包含类似如下内容:

<yaml>
--- !ruby/object:Post
attributes:
updated_at: 2008-09-05 22:55:47
body: It's a very helpful guide for debugging your Rails app.
title: Rails debugging guide
published: t
id: "1"
created_at: 2008-09-05 22:55:47
attributes_cache: {}

Title: Rails debugging guide
</yaml>

h4. +inspect+

另外一个显示对象值的有用方法是 +inspect+, 特别是在处理数组和哈希的时候。它会以字符串的形式将对象值打印出来。比如:

<html>
<%= [1, 2, 3, 4, 5].inspect %>
<p>
  <b>Title:</b>
  <%=h @post.title %>
</p>
</html>

会以如下的形式显示:

<pre>
[1, 2, 3, 4, 5]

Title: Rails debugging guide
</pre>

h3. 日志

在运行状态中，将信息保存在日志文件中也十分有用。Rails为每一个运行环境维护着一个独立的日志文件。

h4. 什么是日志?

Rails使用Ruby的标准 +logger+ 来记录日志信息。 如果愿意的话，你也可以用其它的日志工具比如 +Log4r+ 来替换。

你可以在 +environment.rb+ 或其它任何环境文件中指定一个替换的日志工具:

<ruby>
Rails.logger = Logger.new(STDOUT)
Rails.logger = Log4r::Logger.new("Application Log")
</ruby>

或在 +Initializer+ 部分，添加下面部分

<ruby>
config.logger = Logger.new(STDOUT)
config.logger = Log4r::Logger.new("Application Log")
</ruby>

提示: 默认情况下, 每个日志被创建于文件夹 +Rails.root/log/+ 下面,并且日志的文件名为 +environment_name.log+ 。

h4. 日志级别

如果日志信息的日志级别等于或者高于当前配置的日志级别时，一些日志信息就会打印在对应的日志文件中。如果你想知道当前的日志级别，你可以调用 +Rails.logger.level+ 方法。

可用的日志级别包含: +:debug+，+:info+，+:warn+, +error+,和 +:fatal+, 对相应日志级别数值依次为从0到4。 要更改默认的日志级别的话，可以通过：

<ruby>
config.log_level = :warn # In any environment initializer, or
Rails.logger.level = 0 # at any time
</ruby>

这尤其是在开发或者工作台模式时想记录日志，但不希望在生产日志中充斥着大量的不必的信息时十分有用。

提示: 在生产模式下默认的日志级别为 +info+，在开发和测试模式下默认的日志级别为 +debug+ 。

h4. 发送信息

在控制器，模型或者mailer中，通过 +logger.(debug|info|warn|error|fatal)+ 方法在当前日志中记录信息：

<ruby>
logger.debug "Person attributes hash: #{@person.attributes.inspect}"
logger.info "Processing the request..."
logger.fatal "Terminating application, raised unrecoverable error!!!"
</ruby>

下面是一个被注入了附加日志的方法样例：

<ruby>
class PostsController < ApplicationController
  # ...

  def create
    @post = Post.new(params[:post])
    logger.debug "New post: #{@post.attributes.inspect}"
    logger.debug "Post should be valid: #{@post.valid?}"

    if @post.save
      flash[:notice] = 'Post was successfully created.'
      logger.debug "The post was saved and now the user is going to be redirected..."
      redirect_to(@post)
    else
      render :action => "new"
    end
  end

  # ...
end
</ruby>

下面是一个通过这个方法生成的日志样例：

<shell>
Processing PostsController#create (for 127.0.0.1 at 2008-09-08 11:52:54) [POST]
  Session ID: BAh7BzoMY3NyZl9pZCIlMDY5MWU1M2I1ZDRjODBlMzkyMWI1OTg2NWQyNzViZjYiCmZsYXNoSUM6J0FjdGl
vbkNvbnRyb2xsZXI6OkZsYXNoOjpGbGFzaEhhc2h7AAY6CkB1c2VkewA=--b18cd92fba90eacf8137e5f6b3b06c4d724596a4
  Parameters: {"commit"=>"Create", "post"=>{"title"=>"Debugging Rails",
 "body"=>"I'm learning how to print in logs!!!", "published"=>"0"},
 "authenticity_token"=>"2059c1286e93402e389127b1153204e0d1e275dd", "action"=>"create", "controller"=>"posts"}
New post: {"updated_at"=>nil, "title"=>"Debugging Rails", "body"=>"I'm learning how to print in logs!!!",
 "published"=>false, "created_at"=>nil}
Post should be valid: true
  Post Create (0.000443)   INSERT INTO "posts" ("updated_at", "title", "body", "published",
 "created_at") VALUES('2008-09-08 14:52:54', 'Debugging Rails',
 'I''m learning how to print in logs!!!', 'f', '2008-09-08 14:52:54')
The post was saved and now the user is going to be redirected...
Redirected to #<Post:0x20af760>
Completed in 0.01224 (81 reqs/sec) | DB: 0.00044 (3%) | 302 Found [http://localhost/posts]
</shell>

像这样添加附属日志信息，会使在日志中查询异常行为变的简单。在添加附属日志的时候，确保使用了合理的日志级别，这样可以避免在生产日志中添加大量的无用的琐碎信息。

h3. 通过 +ruby-debug+ 调试

当你的代码表现出费解的行为时，你可以通过在日志或者控制台中打印信息来诊断问题。不幸的是，在很多情况下这种追踪错误的方法并不是找到问题根本原因的有效方法。 当你实际需要深入到你正在执行的源码的时候，调试器是你最好的伙伴。

调试器同时也能你在不知道如何下手的时候，帮助你学习Rails的源代码。只需要从调试你应用中的任意一个请求开始，使用这份指南学到如何从你的代码深入到Rails核心代码。

h4. 安装

Rails中使用到的调试器, +ruby-debug+, 作为一个gem引入. 要安装它只需要执行:

<shell>
$ sudo gem install ruby-debug
</shell>

提示：如果你使用的是Ruby 1.9，你可以通过执行 +sudo gem install ruby-debug19+ 安装一个兼容版本的 +ruby-debug+

如果你想下载一个特殊版本或者获取源代码，可以参照“project's page on rubyforge”:http://rubyforge.org/projects/ruby-debug/.

从Rails 2.0开始Rails内置了对ruby-debug的支持。在任何Rails应用中，你都可以通过调用 +debugger+ 方法来调用调试器。

下面是个例子：

<ruby>
class PeopleController < ApplicationController
  def new
    debugger
    @person = Person.new
  end
end
</ruby>

如果你在终端或者日志中看到如下的信息：

<shell>
***** Debugger requested, but was not available: Start server with --debugger to enable *****
</shell>

请确保你已经使用 +--debugger+ 选项启动web服务器：

<shell>
$ rails server --debugger
=> Booting WEBrick
=> Rails 3.0.0 application starting on http://0.0.0.0:3000
=> Debugger enabled
...
</shell>

提示：在开发模式中，如果你没有使用 +--debugger+ 启动服务器，你可动态的 +require \'ruby-debug\'+ 而不用避免重启服务器。

h4. Shell

一旦你的应用调用了 +debugger+ 方法，在你启动了应用服务器后，调试器会在终端窗口中启动一个调试Shell，并且你会看到ruby调试器的 +(rdb:n)+ 提示符。_n_ 是启动的线程号。 提示行也会显示出正在等待执行的下一行代码。

如果你通过一个浏览器请求到达断点，直到调试结束和整个请求被处理完成，浏览页面才会被完全显示出来；否则包含请求的浏览页面会一直被挂起。

比如:

<shell>
@posts = Post.all
(rdb:7)
</shell>

现在是深入了解并挖掘你的应用的时候了。 一个开始的好地方是寻求调试器的帮助...... 因此，输入： +help+ 

<shell>
(rdb:7) help
ruby-debug help v0.10.2
Type 'help <command-name>' for help on a specific command

Available commands:
backtrace  delete   enable  help    next  quit     show    trace
break      disable  eval    info    p     reload   source  undisplay
catch      display  exit    irb     pp    restart  step    up
condition  down     finish  list    ps    save     thread  var
continue   edit     frame   method  putl  set      tmate   where
</shell>

提示：通过在调试模式下使用 +help &lt;command-name&gt;+ 命令来查看任意命令的帮助。 比如：_+help var+_

另一个非常有用的命令是：+list+. 在输入的字母足够使其从它命令中分辨出来的情况下，你也可以以缩略的形式输入ruby-debug命令，比如你可以使用 +l+ 来代表 +list+ 命令

这个命令同时也列出了当前代码的位置，它详细列出了以当前行代码的为中心的10行代码；在下面指定的这个情况下，当前代码行为第六行并且它以 +=>+ 符号标记出来。

<shell>
(rdb:7) list
[1, 10] in /PathToProject/posts_controller.rb
   1  class PostsController < ApplicationController
   2    # GET /posts
   3    # GET /posts.json
   4    def index
   5      debugger
=> 6      @posts = Post.all
   7
   8      respond_to do |format|
   9        format.html # index.html.erb
   10        format.json { render :json => @posts }
</shell>

如果你重复输入 +list+ 命令或者仅使用 +l+ , 文件中紧接的十行代码会被打印出来。

<shell>
(rdb:7) l
[11, 20] in /PathTo/project/app/controllers/posts_controller.rb
   11      end
   12    end
   13
   14    # GET /posts/1
   15    # GET /posts/1.json
   16    def show
   17      @post = Post.find(params[:id])
   18
   19      respond_to do |format|
   20        format.html # show.html.erb
</shell>

以此类推直到当前文件结束。当到达文件结束的时候，+list+ 命令会把当前文件当做一个循环的缓冲器，从当前文件的开始位置重新进行从头至尾的遍历。

同时，如果想查看前十行的代码的话，你可以输入 +list-+ (或 +l-+)

<shell>
(rdb:7) l-
[1, 10] in /PathToProject/posts_controller.rb
   1  class PostsController < ApplicationController
   2    # GET /posts
   3    # GET /posts.json
   4    def index
   5      debugger
   6      @posts = Post.all
   7
   8      respond_to do |format|
   9        format.html # index.html.erb
   10        format.json { render :json => @posts }
</shell>

通过这个方法你可在文件内部自由移动，查看添加 +debugger+ 之前和之后的代码。
最后，你可以输入 +list=+ 回到调试代码的初始位置。

<shell>
(rdb:7) list=
[1, 10] in /PathToProject/posts_controller.rb
   1  class PostsController < ApplicationController
   2    # GET /posts
   3    # GET /posts.json
   4    def index
   5      debugger
=> 6      @posts = Post.all
   7
   8      respond_to do |format|
   9        format.html # index.html.erb
   10        format.json { render :json => @posts }
</shell>

h4. 上下文

当开始调试应用的时候，在你穿梭在堆栈不同部分时你会处于不同的上下文关系中。

当到达一个断点或一个事件的时候，ruby-debug会创建一个上下文。这个上下文包含了程序所挂起的信息，从而可以使调试器能够查看堆栈框架，从调试程序的角度查看变量，并且包含了调试程序被停止位置的信息。

在任何时候你可以调用命令 +backtrace+ (或其别名 +where+)来打印应用的回溯信息。这对于想知道怎么到达你现在的代码位置非常有用。任何时候如果你对怎么到达当前代码位置有些疑虑的时候，可以通过 +backtrace+ 来获得答案。


<shell>
(rdb:5) where
    #0 PostsController.index
       at line /PathTo/project/app/controllers/posts_controller.rb:6
    #1 Kernel.send
       at line /PathTo/project/vendor/rails/actionpack/lib/action_controller/base.rb:1175
    #2 ActionController::Base.perform_action_without_filters
       at line /PathTo/project/vendor/rails/actionpack/lib/action_controller/base.rb:1175
    #3 ActionController::Filters::InstanceMethods.call_filters(chain#ActionController::Fil...,...)
       at line /PathTo/project/vendor/rails/actionpack/lib/action_controller/filters.rb:617
...
</shell>

通过命令 +frame_n_+ 你可以移动到这个轨迹里的任意位置(通过改变上下文)，_n_ 代表了制定的框架号。

<shell>
(rdb:5) frame 2
#2 ActionController::Base.perform_action_without_filters
       at line /PathTo/project/vendor/rails/actionpack/lib/action_controller/base.rb:1175
</shell>

可用的变量和你逐行执行代码完全一样。毕竟，这就是调试的所在。

在堆栈框架内部上下移动：你可以使用 +up [n]+ (缩略为 +u+ ) 和 +down [n]+ 命令达到更改上下文环境为在堆栈内向上或向下 _n_ 层框架。在这例子中，向上为朝较高编号的框架，而向下为较低编号的框架。

h4. 线程

通过命令 +thread+ (或缩写形式 +th+ )调试器可以列出，停止，恢复线程，以及在正在执行的线程之间切换。这个命令包含一系列的选项：

* +thread+ 查看当前线程.
* +thread list+ 列出所有线程和他们的状态。加号 + 符号和数字代表了正在执行的线程。
* +thread stop _n_+ 停止线程 _n_.
* +thread resume _n_+ 恢复线程 _n_.
* +thread switch _n_+ 切换当前线程上下文到 _n_.

相对其它场合，当你在调试并发线程时并且需要验证你的代码中没有资源竞争时，这个命令非常有用。


h4. 检查变量

在当前上下文中可以评估任何表达式的值。如果要评估一个表达式，只需要输入即可！

这个例子说明了如何打印当前上下文中所定义的的实例变量：

<shell>
@posts = Post.all
(rdb:11) instance_variables
["@_response", "@action_name", "@url", "@_session", "@_cookies", "@performed_render", "@_flash", "@template", "@_params", "@before_filter_chain_aborted", "@request_origin", "@_headers", "@performed_redirect", "@_request"]
</shell>

你或许已经指出了，它显示了所有可以从一个控制器中能访问的变量。这个列表会在你执行代码的过程中动态更新。比如，通过 +next+ 执行下一行(在本文后面你会获得关于这个命令的更详细的信息)。

<shell>
(rdb:11) next
Processing PostsController#index (for 127.0.0.1 at 2008-09-04 19:51:34) [GET]
  Session ID: BAh7BiIKZmxhc2hJQzonQWN0aW9uQ29udHJvbGxlcjo6Rmxhc2g6OkZsYXNoSGFzaHsABjoKQHVzZWR7AA==--b16e91b992453a8cc201694d660147bba8b0fd0e
  Parameters: {"action"=>"index", "controller"=>"posts"}
/PathToProject/posts_controller.rb:8
respond_to do |format|
</shell>

接着再次查询实例变量：

<shell>
(rdb:11) instance_variables.include? "@posts"
true
</shell>

现在 +@posts+ 被包含在实例变量列表中, 因为定义它的那行代码被执行了.

提示: 你也可以通过命令 +irb+ (一定，确定以及肯定！) 进入到 *irb* 模式。通过这种方法在你调用的位置启动一个irb会话。但是注意：这是一个实验性质的功能。

+var+ 方法是显示变量和值的最方便的方法：

<shell>
var
(rdb:1) v[ar] const <object>            show constants of object
(rdb:1) v[ar] g[lobal]                  show global variables
(rdb:1) v[ar] i[nstance] <object>       show instance variables of object
(rdb:1) v[ar] l[ocal]                   show local variables
</shell>

这是一个查看当前上下文变量值的非常好的方法。比如：

<shell>
(rdb:9) var local
  __dbg_verbose_save => false
</shell>

你也可以用这种方法检查一个对象方法：

<shell>
(rdb:9) var instance Post.new
@attributes = {"updated_at"=>nil, "body"=>nil, "title"=>nil, "published"=>nil, "created_at"...
@attributes_cache = {}
@new_record = true
</shell>

提示：命令 +p+ (print) 和 +pp+ (pretty print) 可以用来评估一个Ruby表达式并在终端中显示变量的值。

你可以使用 +display+ 命令来开始查看变量。这是一个在代码执行过程中跟踪一个变量值的好方法。

<shell>
(rdb:1) display @recent_comments
1: @recent_comments =
</shell>

那些在显示列表内的变量和他们的值会在你移动到堆栈中后打印出来。如果要停止显示变量的话可以使用 +undisplay _n_+ 其中 _n_ 代表了变量编号(在上面的例子中为1)。

h4. 单步调试

现在你应该知道你在执行的序列中处于的位置，并且能够打印出可用的变量。但我们继续探讨应用的执行。

使用 +step+ (缩写形式为 +s+ ) 来继续程序的执行知道遇到下一个断点并且将控制权返回给ruby调试器。

提示：你可以使用<tt>step<plus> n</tt> 和 <tt>step- n</tt> 来分别向前或者先后运行 +n+ 步。

你也可以使用 +next+ 命令，它和step类似但是不会中断代码行中函数或方法调用。 和step一样，你也可以使用加号符号来移动 _n_ 步。

+next+ 和 +step+ 的不同之处在于，+step+ 在下一行执行代码前停下，它只是单步执行。而 +next+ 会移动到下一行代码但并不会进入到内部的方法中。

比如， 下面这个包含了 +debugger+ 语句的代码块：

<ruby>
class Author < ActiveRecord::Base
  has_one :editorial
  has_many :comments

  def find_recent_comments(limit = 10)
    debugger
    @recent_comments ||= comments.where("created_at > ?", 1.week.ago).limit(limit)
  end
end
</ruby>

提示：你可以在使用 +rails console+ 时使用ruby调试器。记得在调用 +debugger+ 之前包含 +require "ruby-debug"+

<shell>
$ rails console
Loading development environment (Rails 3.1.0)
>> require "ruby-debug"
=> []
>> author = Author.first
=> #<Author id: 1, first_name: "Bob", last_name: "Smith", created_at: "2008-07-31 12:46:10", updated_at: "2008-07-31 12:46:10">
>> author.find_recent_comments
/PathTo/project/app/models/author.rb:11
)
</shell>

当代码停止下来后，可以查看一下：

<shell>
(rdb:1) list
[2, 9] in /PathTo/project/app/models/author.rb
   2    has_one :editorial
   3    has_many :comments
   4
   5    def find_recent_comments(limit = 10)
   6      debugger
=> 7      @recent_comments ||= comments.where("created_at > ?", 1.week.ago).limit(limit)
   8    end
   9  end
</shell>

你现在位于代码行的结尾，但是...... 这行代码有没有被执行过哪？ 你可以通过查看实例变量值来确定。

<shell>
(rdb:1) var instance
@attributes = {"updated_at"=>"2008-07-31 12:46:10", "id"=>"1", "first_name"=>"Bob", "las...
@attributes_cache = {}
</shell>

+@recent_comments+ 还没有被定义，因此可以说明该行代码还没有被执行过。 使用 +next+ 命令继续代码：

<shell>
(rdb:1) next
/PathTo/project/app/models/author.rb:12
@recent_comments
(rdb:1) var instance
@attributes = {"updated_at"=>"2008-07-31 12:46:10", "id"=>"1", "first_name"=>"Bob", "las...
@attributes_cache = {}
@comments = []
@recent_comments = []
</shell>

现在你可以看到 +@comments+ 关系已经被加载了并且 @recent_comments 已经被定义，因为该行代码已经执行完成。

如果你想更深入的了解调用堆栈，你可以使用单步移动命令 +step+， 通过调用方法深入到Rails代码内部。这个查找到你代码中bug的最好的方法之一，或许是Ruby或Rails中的bug.

h4. 断点

断点会使你的程序在当前位置停下来，并且一个调试shell会在当前行位置处被激活。

你可以通过命令 +break+ (或 仅仅 +b+)来动态的添加断点。添加断点有三种方法：

* +break line+: 在当源文件的_line_ 行设置断点。
* +break file:line [if expression]+: 在文件_file_ 的_line_行号处设置断点。如果提供了表达式 _expression_， 只有它的值为 _true_ 的时候调试器才会被激活。 
* +break class(.|\#)method [if expression]+: 在定义在类 _class_ 中的方法 _method_ 设置断点(. 和 \# 分别代表类和实例方法)。 _expression_ 和 file:line 中的表达式工作方式一样。 

<shell>
(rdb:5) break 10
Breakpoint 1 file /PathTo/project/vendor/rails/actionpack/lib/action_controller/filters.rb, line 10
</shell>

使用 +info breakpoints _n_+ 或 +info break _n_+ 来列出断点。 如果你提供了一个数字，它会列出那个断点。否则的话，它会列出所有的断点。

<shell>
(rdb:5) info breakpoints
Num Enb What
  1 y   at filters.rb:10
</shell>

使用命令 +delete _n_+ 来移除编号为 _n_ 的断点。 如果没有提供编号，她会移除所有当前激活的断点。

<shell>
(rdb:5) delete 1
(rdb:5) info breakpoints
No breakpoints.
</shell>

你也可以启用或禁用断点：

* +enable breakpoints+: 允许一组断点或者所有的断点（如果没有提供断点列表的话）来停止你的程序。它是你创建断点是的默认状态。
* +disable breakpoints+: _breakpoints_ 对程序没有任何作用。

h4. 捕捉异常

当存在异常时，命令 +catch exception-name+ (或仅 +cat exception-name+) 可以用来抢断一个类型为 _exception-name_ 的异常。否则的话，没有该异常的处理器。

使用 +catch+ 列出了所有激活的异常捕捉点。

h4. 恢复执行

有两种恢复被调试器中断的程序执行：

* +continue+ [line-specification] (or +c+): 在脚本上次停止处，恢复程序执行；任何在那个位置所设置的断点都会被掉过。可选的参数line-specification 允许你制定一个行号，来设置一个一次性的断点。当这个断点到达时就会被删除掉。
* +finish+ [frame-number] (or +fin+): 继续执行直到从指定的堆栈框架中返回。如没有提供框架号的话，应用会持续执行执行直到从当前选定的框架中返回。如果没有进行过框架定位（比如，up,down 或 frame), 当前选定的框架从最接近的框架或0框架开始。 如果提供了框架标号，那么它会持续执行知道从指定的框架中返回。

h4. 编辑

通过两个命令可以允许你在调试器状态下，在编辑器中打开代码：

* +edit [file:line]+: 使用环境变量EDITOR制定的编辑器编辑文件 _file_。同时也可以提供一个确定的行号。
* +tmate _n_+ (abbreviated +tm+): 在TextMate中打开当前代码， 它使用第 _n_ 个框架如果指定了 _n_.

h4. 退出

退出调试器可是使用命令 +quit+ (简写为 +q+ ), 或者它的别名 +exit+.

简单的退出会试图终止所有当前运行的线程。因此你的服务器会被停止而且你需要重新启动服务器。

h4. 设置

在ruby调试器中有一些设置可以使调试代码更加方便。下面是一些可用的选项：

* +set reload+: 重新加载代码当代码改变的时候。
* +set autolist+: 在每个断点处执行 +list+ 命令
* +set listsize _n_+: 设置默认的list源代码行数为 _n_
* +set forcestep+: 确保 +next+ 和 +step+ 命令总是移动到一个新行。

你可以通过 +help set+ 查看所有的设置选项。 使用 +help set _subcommand_+ 可以获得关于一个特定的 +set+  命令的详细信息。

提示：你可以在HOME文件夹下的 +.rdebugrc+ 文件中包含任意数量的这些配置。ruby调试器会在每次启动时读取这个文件并且根据它进行配置。

下面是一个很好的初始配置文件 +.rdebugrc+:

<shell>
set autolist
set forcestep
set listsize 25
</shell>

h3. 调试内存泄露

一个Ruby应用（不管是否基于Rails），都有可能泄露内存 - 或者在Ruby代码级别或者在C代码级别。

在这部分，会介绍如何通过工具查找并修复这些泄露，这些工具比如：BleakHouse 和 Valgrind

h4. BleakHouse

"BleakHouse":https://github.com/fauna/bleak_house/tree/master 是一个查找内存泄露的一个库。

如果一个Ruby对象没有越界，Ruby垃圾收集器不会清除它，因为它在某些地方被引用到。像这样的泄露会慢慢的增长，并且你的应用会消耗掉越来越多的内存，并逐渐的影响到整个系统的性能。这个工具可以帮助你发现在Ruby堆上的泄露。

通过执行下面命令安装:

<shell>
$ sudo gem install bleak_house
</shell>

然后设置你的应用做分析. 接着在 config/environment.rb 底部添加下面的代码

<ruby>
require 'bleak_house' if ENV['BLEAK_HOUSE']
</ruby>

启动集成了BlackHouse的一个服务器实例：

<shell>
$ RAILS_ENV=production BLEAK_HOUSE=1 ruby-bleak-house rails server
</shell>

确保执行了至少数百个请求来得到一个好的采样数据，然后输入 +CTRL-C+。 服务器会停下来并且BleakHouse会在 +/tmp+ 文件夹下生成一个dump文件：

<shell>
** BleakHouse: working...
** BleakHouse: complete
** Bleakhouse: run 'bleak /tmp/bleak.5979.0.dump' to analyze.
</shell>

通过执行listed命令来分析结果。最高的20行泄露代码会被列出来：

<shell>
  191691 total objects
  Final heap size 191691 filled, 220961 free
  Displaying top 20 most common line/class pairs
  89513 __null__:__null__:__node__
  41438 __null__:__null__:String
  2348 /opt/local//lib/ruby/site_ruby/1.8/rubygems/specification.rb:557:Array
  1508 /opt/local//lib/ruby/gems/1.8/specifications/gettext-1.90.0.gemspec:14:String
  1021 /opt/local//lib/ruby/gems/1.8/specifications/heel-0.2.0.gemspec:14:String
   951 /opt/local//lib/ruby/site_ruby/1.8/rubygems/version.rb:111:String
   935 /opt/local//lib/ruby/site_ruby/1.8/rubygems/specification.rb:557:String
   834 /opt/local//lib/ruby/site_ruby/1.8/rubygems/version.rb:146:Array
  ...
</shell>

通过这种方法你会找到你的应用在哪里发生泄露并且修复它。

如果 "BleakHouse":https://github.com/fauna/bleak_house/tree/master 没有报告任何的堆增长，但是你仍然发现内存在增长。 你可能存在这一个C代码级的泄露，或解析器上的泄露。这种情况下，可以尝试使用Valgrind来进行进一步的调查。

h4. Valgrind

"Valgrind":http://valgrind.org/ 是一个Linux环境下用于监测C级别的内存泄露和资源竞争的工具。

Valgrind工具可以自动探测许多内存管理和线程的bug，并且对你的应用进行很详细的分析。比如，在解析器里面一个C扩展调用了 +malloc()+ 但没有正确的调用 +free()+ 释放，这部分内存知道应用结束之前无法被使用。

你可以参照Evan Weaver的 "Valgrind and Ruby":http://blog.evanweaver.com/articles/2008/02/05/valgrind-and-ruby/ 来获取如何在ruby中安装和使用的进一步的详细信息。

h3. 调试插件

有一些Rails插件来帮助你查找Rails应用中的错误和调试Rails应用。下面是一些对于调试非常有用的插件：

* "Footnotes":https://github.com/josevalim/rails-footnotes:每个Rails页面都会包含一个包含了请求信息的脚注和一个通过TextMate连接到源代码的链接。
* "Query Trace":https://github.com/ntalbott/query_trace/tree/master: 在日志中加入查询源跟踪信息。
* "Query Stats":https://github.com/dan-manges/query_stats/tree/master: 一个跟踪数据库查询的插件
* "Query Reviewer":http://code.google.com/p/query-reviewer/: 在开发过程中，这个Rails插件不但在每个查询请求前执行“EXPLAIN”命令，并且为每个页面提供了一个小的DIV，其中包含了它分析到的每条查询的警告信息的总结。
* "Exception Notifier":https://github.com/smartinez87/exception_notification/tree/master: 提供一个mailer对象和一组默认模版，用来在Rails应用发生错误时发送email通知。
* "Exception Logger":https://github.com/defunkt/exception_logger/tree/master:  在数据库中记录Rails异常并且提供了一个时髦的Web界面来管理他们。

h3. 参考

* "ruby-debug Homepage":http://www.datanoise.com/ruby-debug
* "Article: Debugging a Rails application with ruby-debug":http://www.sitepoint.com/article/debug-rails-app-ruby-debug/
* "ruby-debug Basics screencast":http://brian.maybeyoureinsane.net/blog/2007/05/07/ruby-debug-basics-screencast/
* "Ryan Bate's ruby-debug screencast":http://railscasts.com/episodes/54-debugging-with-ruby-debug
* "Ryan Bate's stack trace screencast":http://railscasts.com/episodes/24-the-stack-trace
* "Ryan Bate's logger screencast":http://railscasts.com/episodes/56-the-logger
* "Debugging with ruby-debug":http://bashdb.sourceforge.net/ruby-debug.html
* "ruby-debug cheat sheet":http://cheat.errtheblog.com/s/rdebug/
* "Ruby on Rails Wiki: How to Configure Logging":http://wiki.rubyonrails.org/rails/pages/HowtoConfigureLogging
* "Bleak House Documentation":http://blog.evanweaver.com/files/doc/fauna/bleak_house/files/README.html

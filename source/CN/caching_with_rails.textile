h2. Rails中使用缓存：概述

本指南将会教你怎样去避免高成本的数据库读取和尽可能花最短的时间返回你所需要内容的到 web 客户端。

阅读本指南后，你将能够使用和配置：

* 页面，action，和片段的缓存
* Sweepers
* 可选择的 cache 存储方式
* 有条件的 GET 支持

endprologue.

h3. 基本的缓存

这是一份对三种 Rails 提供的不需要第三方插件支持的缓存技术的介绍。

如果在开发模式下，使用缓存首先要确保 +config.action_controller.perform_caching+ 设置为 +true+。通常是在对应的 +config/environments/*.rb+ 下设置，在开发和测试模式下通常缓存默认为不使用用，在生产环境下为使用的。

<ruby>
config.action_controller.perform_caching = true
</ruby>

h4. 页面缓存

页面缓存是一种 Rails 的机制，它允许请求已经由 webserver （如：Apache 或 nginx）生成的页面 ，而不需要通过 Rails 的栈。很明显地这非常快，但它不能在所有的情况下使用（例如需要认证的页面）。而且因为 webserver 是直接的从文件系统中请求文件，cache 失效也是一个需要处理的问题。 

使用页面缓存，你需要使用 +caches_page+ 方法。

<ruby>
class ProductsController < ActionController

  caches_page :index

  def index
    @products = Products.all
  end
end
</ruby>


假如有个控制器为 +ProductsController+ 然后有个 +index+ 的 action 列出所有的产品 （products），任何第一次请求 +/products+ 时 Rails 会生成一个文件：+products.html+ 而且 webserver 会查找那个文件直到下次向 Rails 应用程序请求 +/products+。 

页面的缓存目录默认设置为 +Rails.public_path+ （这就是通常设置的 +public+ 文件夹)，可以通过修改配置选项 +config.action_controller.page_cache_directory+ 来设置。由于可能在 +public+ 目录下放其他静态 html 文件，所以修改掉默认的 +public+ 可以避免命名冲突。但这就需要重新配置 web server 让它知道从哪里来获取已经缓存的文件。

页面缓存机制会自动添加 +.html+ 后缀名到请求的没有后缀的页面，以使 webserver 更加容易的查找到这些页面。可以通过修改配置选项  +config.action_controller.page_cache_extension+ 来改变。

当添加一个新的产品（ product ）时，为了使页面失效，可以这样修改控制器：

<ruby>
class ProductsController < ActionController

  caches_page :index

  def index
    @products = Products.all
  end

  def create
    expire_page :action => :index
  end

end
</ruby>


如果想使用一个更复杂的失效机制，可以使用缓存清理器（ cache sweepers ）在改变发生时使已缓存的对象失效。这在 Sweepers 部分有说明。

页面缓存默认会自动压缩（ gzip ）文件，（例如用户请求 +/products+ 会使用 +products.html.gz+ ）为了减少数据传输的大小（ web 服务器一般配置为使用合适的压缩比例，但因为已经有一次预编译了，压缩比例是最大的了）。

Nginx 可以通过开启 +gzip_statis+ 来直接使用硬盘上的已压缩的内容。

<plain>
location /  {
  gzip_static on; # to serve pre-gzipped version
}
</plain>

也可以通过将 +:gzip+ 选项设置为 false 来关闭使用压缩文件，（例如 action 返回图片时则不需要压缩）。

<ruby>
caches_page :image, :gzip => false
</ruby>

或者设置特定的压缩级别（级别名称可以使用 +Zlib+ 中的常量）：

<ruby>
caches_page :image, :gzip => :best_speed
</ruby>

NOTE: 页面缓存会忽略所有的参数。如 +/products?page=1+ 将会在文件系统中生成没有关于 +page+ 参数的 +/products.html+ 。这样如果之后有人请求 +/products?page=2+ ，将会获取到缓存的第一页。能采取的措施就是把参数包含在页面的路径中，如： +/productions/page/1+ 。

INFO: 页面缓存在过滤器之后运行。这样，只要你中断无效的请求就不会生成伪造的缓存纪录。通常在一些检验请求的 before filter 中的跳转会做这项工作。

h4. Action 缓存

页面缓存的问题之一是，不能缓存需要限制访问的页面。这时就有了 Action 缓存。Action 缓存和页面缓存一样，但它的网页请求是从 webserver 到 Rails 栈和 Action Pack 中。这样 before filter 可以在 cache 服务之前运行。就使得在获取缓存副本的同时也能运行权限和其他验证限制。

清除缓存的方法和清除页面缓存一样，除了使用 +expire_action+ 代替 +expire_page+。

如果想要已验证的用户才能调用 +ProductionsController+ 中的 action。

<ruby>
class ProductsController < ActionController

  before_filter :authenticate
  caches_action :index

  def index
    @products = Product.all
  end

  def create
    expire_action :action => :index
  end

end
</ruby>

可以使用 +:if+ （或 +:unless+ ）来传递一个 Proc 来确定什么时候 action 能被缓存。同时也可以使用 +:layout => false+ 来取消 layout 的缓存，这样在 layout 中的动态信息如登录的用户信息或者购物车的项目数量就不被缓存了。这个特性在 Rails 2.2 就可以使用了。

可以通过修改 +:cache_path+ 选项的值来传递默认的 action 缓存的路径。修改的值被直接传给 +ActionCachePath.path_for+ 。这便于有多个路由的 action 做不同的缓存。如果传递一个块，将会被当前的控制器实例调用。

最后，如果使用 memcached 或 Ehcache ，可以传值到 +:expires_in+ 。事实上所有不被 +caches_action+ 使用的参数都发送到了底层的缓存存储。

INFO: Action 缓存在 after filter 中运行。这样，只要你中断无效的请求，它将不会产生伪造的缓存纪录。通常在一些检验请求的 before filter 中的跳转会做这项工作。

h4. 片段缓存

如果可以通过缓存整个页面或 action 来处理所有的问题那就完美了。但是动态的 web 应用程序通常会用不同的部分来构成页面，这些不同的部分并不都是使用完全相同的缓存配置。为了处理一个不同部分需要不同的缓存和失效时间的动态创建的页面， Rails 提供了片段缓存的机制。 

Fragment Caching allows a fragment of view logic to be wrapped in a cache block and served out of the cache store when the next request comes in.

片段缓存允许一个逻辑视图的片段放在一个缓存块中，在下一个请求时就可以直接使用缓存存储。

As an example, if you wanted to show all the orders placed on your website in real time and didn't want to cache that part of the page, but did want to cache the part of the page which lists all products available, you could use this piece of code:

举个例子，你想要在网站上实时的显示所有的订单，不想缓存页面上的这一部分，但是想缓存页面上显示所有产品的那一部分，可以这样写你的代码：

<ruby>
<% Order.find_recent.each do |o| %>
  <%= o.buyer.name %> bought <%= o.product.name %>
<% end %>

<% cache do %>
  All available products:
  <% Product.all.each do |p| %>
    <%= link_to p.name, product_url(p) %>
  <% end %>
<% end %>
</ruby>

例子中的缓存块将会绑定到调用它的 action ，之后会将缓存写在和 Action 缓存的相同位置。所以如果你想为每个 action 缓存多个片段，你应该在 cache 调用时提供 +action_suffix+ ：

<ruby>
<% cache(:action => 'recent', :action_suffix => 'all_products') do %>
  All available products:
</ruby>

同时可以使用 +expire_fragment+ 方法来使缓存失效：

<ruby>
expire_fragment(:controller => 'products', :action => 'recent', :action_suffix => 'all_products')
</ruby>

如果不希望缓存块绑定到所调用的 action ，可以通过调用加上一个关键字的 +cache+ 方法使用全局片段：

<ruby>
<% cache('all_available_products') do %>
  All available products:
<% end %>
</ruby>

这个片段可以在 +ProductionsController+ 的所有 action 中使用。使用关键字，再以同样的方式使它失效：

<ruby>
expire_fragment('all_available_products')
</ruby>

h4. 清理器

Cache 清理是让你在代码里避免调用一大堆 +expire_{page,action,fragmeng}+ 方法的机制。它把所有需要是缓存内容失效的工作移到了 +ActionController::Caching::Sweeper+ 的子类中。这个类是一个观察器，通过回调来查询一个对象的变化，当变化发生时，就会在 around 或 after filter 中将该对象缓存的相关内容失效。

继续 Product controller 的例子，可以在清理器中这样处理：

<ruby>
class ProductSweeper < ActionController::Caching::Sweeper
  observe Product # This sweeper is going to keep an eye on the Product model

  # If our sweeper detects that a Product was created call this
  def after_create(product)
    expire_cache_for(product)
  end

  # If our sweeper detects that a Product was updated call this
  def after_update(product)
    expire_cache_for(product)
  end

  # If our sweeper detects that a Product was deleted call this
  def after_destroy(product)
    expire_cache_for(product)
  end

  private
  def expire_cache_for(product)
    # Expire the index page now that we added a new product
    expire_page(:controller => 'products', :action => 'index')

    # Expire a fragment
    expire_fragment('all_available_products')
  end
end
</ruby>

可能你注意到了实际的 product 传递到了清理器，如果对每一个 product 的 edit action 缓存，就可以加上一个对特定页面的失效方法：

<ruby>
expire_action(:controller => 'products', :action => 'edit', :id => product.id)
</ruby>

之后把它加到控制器中，来告知控制器当某个 action 调用时使用清理器。如果我们想在 create action 调用后，使列表和 edit action 的缓存内容失效，我们可以这样做：

<ruby>
class ProductsController < ActionController

  before_filter :authenticate
  caches_action :index
  cache_sweeper :product_sweeper

  def index
    @products = Product.all
  end

end
</ruby>

h4. SQL 缓存

查询缓存是 Rails 的一个特性，它缓存了每一个数据库查询的结果集，这样如果 Rails 再次遇到那个请求中的同样的查询，它将会使用缓存的结果集而不是到数据库中继续查询。

例如：

<ruby>
class ProductsController < ActionController

  def index
    # Run a find query
    @products = Product.all

    ...

    # Run the same query again
    @products = Product.all
  end

end
</ruby>

第二次对数据库运行相同的查询，它实际上并不到数据库查询。第一次查询返回的结果存储在查询缓存（内存）中，第二次就直接从内存中读取。

然而，需要注意查询缓存在一个 action 的开始时创建，在 action 结束时清除，只持续在这个 action 的期间。如果希望在一个更持久的方式中存储查询结果，可以在 Rails 中使用低级别的缓存。

h3. 缓存存储

Rails 对通过 action 或片段缓存的数据提供不同的存储方式。页面缓存通常存储在硬盘上。

h4. 配置

可以在程序配置时通过修改在 +config/application.rb+ 中的 +config.cache_store=+ 选项来设置应用程序的默认缓存存储方式，或者在特定的环境配置文件（如 +config/environments/*.rb+)的 Application.configure 块中设置。第一个参数指定使用的缓存存储方式，其他的参数会传递到缓存构造器中。

<ruby>
config.cache_store = :memory_store
</ruby>

也可以在配置块之外调用 +ActionController::Base.cache_store+。

可以通过调用 +Rails.cache+ 来读写 cache。

h4. ActiveSupport::Cache::Store

这个类提供了 Rails 中缓存交互的基础，它是个抽象类，不能直接使用。相反，你需要使用这个类的一个具体实现绑定到一个存储引擎。 Rails 下面提供了几种具体实现的文档。 

主要的调用的方法为 +read+, +write, +delete+, +exist?+ 和 +fetch+。fetch 方法使用一个块，将会返回一个缓存中已有的值，当值不存在时则执行块，然后把结果写到缓存中。

有许多在所有缓存实现中通用的选项。这些可以传递到构造器，或者与各种方法交互。

* +:namespace+ - 这个选项在缓存存储创建命名空间时使用。在应用程序和其他应用程序共享一个缓存的情况下，这是非常有用的。默认的值将会包含应用程序名称和 Rails 环境。

* +:compress+ - 这个选项用来指明在缓存中使用压缩。在速度较慢的网络中传输较大的缓存内容时非常有用。

* +:compress_threshold+ － 这个选项和 +compress+ 一起使用，来确定缓存内容不压缩的界限。默认为16K（千字节）。

* +:expires_in+ - 这个选项设置一个以秒为单位的失效时间，这样缓存的条目将会自动从缓存中移除。

* +:race_condition_ttl+ - 这个选项和 +expires_in+ 共同使用。它会在缓存失效时，从同时再产生的相同条目（也被称为 dog pile 效应）中阻止多个进程，以阻止竞争条件。该选项设置了一个失效的条目在已有新值生成的情况下可以被再次使用的秒数。如果使用了 +:expires_in+ 选项，则最好设置该值。

h4. ActiveSupport::Cache::MemoryStore

该缓存存储将在相同的 Ruby 进程中的缓存条目保存在内存中。它可以在初始化时通过设定 +:size+ 选项来限定缓存内容的大小（默认为32M）。当缓存超过了分配的大小，会做一次清理，将最近使用最少的条目移除。

<ruby>
ActionController::Base.cache_store = :memory_store, :size => 64.megabytes
</ruby>

如果你运行多个 Ruby on Rails 服务进程（如使用 mongrel_cluster 或 Phusion Passenger）， Rails 服务进程实例彼此间不能共享缓存数据。这个缓存存储不适合部署大应用程序，但是在小的，只有少数的服务进程的低流量网站或开发及测试环境下使用还是很不错的。

该缓存存储是默认的缓存存储实现方式。

h4. ActiveSupport::Cache::FileStore

该缓存存储方式使用文件系统存储缓存条目。存储文件的目录路径需要在初始化缓存时确定。

<ruby>
ActionController::Base.cache_store = :file_store, "/path/to/cache/directory"
</ruby>

使用该缓存存储，相同主机的多服务进程可以共享一个缓存。不同主机的服务进程也可以使用同一个共享文件系统来共享缓存。但是这样的结构不是完美的，也不推荐使用。该缓存存适合一或两个主机的低到中流量网站。

注意：缓存将会不断增加，直到磁盘满了为止，所以需要定期清理旧的缓存内容。

h4. ActiveSupport::Cache::MemCacheStore

该缓存存储使用 Danga 的 +memcached+ 服务来为应用程序提供集中缓存。Rails 默认使用 +memcache-client+ gem。这是现在网站生产环境下使用的最流行的缓存存储方式。它提供高性能、备份的单一共享 cluster （簇）。

在初始化缓存时，需要在 cluster（簇） 中指定所有 memcached 服务器的地址。若没指定，将会认为 memcached 运行在本地主机的默认端口，对于大型网站来说，这不是完美的。

该缓存存储中的 +write+ 和 +fetch+ 方法接受两个额外的选项来使用 memcached 。可以指定 +:raw+ 来把无序列的值直接传递到服务。该值可以是一个字符串或数值。可以使用 memcached 直接的操作，例如对原始（ raw ）值使用 +increment+ 和 +decrement+ 。如果不希望 memcached 重写已经存在的内容，可以指定 +:unless_exist+ 。

<ruby>
ActionController::Base.cache_store = :mem_cache_store, "cache-1.example.com", "cache-2.example.com"
</ruby>

h4. ActiveSupport::Cache::EhcacheStore

如果你使用 JRuby ，你可以使用 Terracotta 的 Ehcache 作为你应用程序的缓存存储方式。 Ehcache 是开源的 Java 缓存，它也提供具有增加的可扩展性，管理和商业支持的企业版本。使用此缓存存储，需要先安装 jruby-ehcache-rails3 gem 包（版本为1.1.0 及之后的版本）。

<ruby>
ActionController::Base.cache_store = :ehcache_store
</ruby>

在初始化缓存时，你可能使用 +:ehcache_config+ 选项来指定 Ehcache 使用的配置文件（默认为 Rails 项目 config 目录下的“echcache.xml“），:cache_name 选项为缓存提供一个自定义名称（默认的名称为 rails_cache ）。

除了标准的 +:expires_in+ 选项外，+write+ 方法在该缓存中也接收额外的 +:unless_exist+ 选项，它可以使缓存存储使用 Ehcache 的 +putIfAbsent+ 方法来代替 +put+，因此将不会重写已经存在的缓存内容。另外， +write+ 方法提供所有的属性，通过 "Ehcache Element class":http://ehcache.org/apidocs/net/sf/ehcache/Element.html ，包括：

|_. 属性 |_. 参数类型 |_. 描述 |
| elementEvictionData | ElementEvictionData | 设置元素的 eviction 数据实例。 |
| eternal | boolean | 设置元素是否是永久的。 |
| timeToIdle, tti | int | 设置空闲时间 |
| timeToLive, ttl, expires_in | int | 设置活跃时间 |
| version | long | 设置 ElementAttributes 对象的版本属性。 |

这些选项以 Hash 选项传递到 +write+ 方法，使用驼峰命名法或下划线表示法，下面是一个例子：

<ruby>
Rails.cache.write('key', 'value', :time_to_idle => 60.seconds, :timeToLive => 600.seconds)
caches_action :index, :expires_in => 60.seconds, :unless_exist => true
</ruby>

更多关于 Ehcache 的信息，请查看 "http://ehcache.org/":http://ehcache.org/ 。
更多关于 Ehcache for JRuby and Rails 的信息，请查看 "http://ehcache.org/documentation/jruby.html":http://ehcache.org/documentation/jruby.html。

h4. ActiveSupport::Cache::NullStore

该缓存存储的实现不存储任何内容，它应该只是用于开发或测试环境下。在开发环境下这是非常有用的，如果你有代码和 +Rails.cache+ 交互，但是缓存可以直接看到代码更改的结果。使用该缓存存储方式，所有的 +fetch+ 和 +read+ 操作将会丢失。

<ruby>
ActionController::Base.cache_store = :null_store
</ruby>

h4. 自定义的缓存存储

可以通过扩展 +ActiveSupport::Cache::Store+ ，以及实现相应的方法来创建自定义缓存存储。通过这种方式，可以将任何缓存技术应用到你的 Rails 应用程序中。

使用一个自定义的缓存存储，只需要简单的将缓存设置为该类的一个实例。

<ruby>
ActionController::Base.cache_store = MyCacheStore.new
</ruby>

h4. Cache Keys

在缓存中使用的键可以是任何能对 +:cache_key+ 或 +:to_param+ 响应的对象。如果需要生成自定义的键，可以在类里面实现 +:cache_key+ 方法。Active Record 会生成基于类名和纪录 id 的键。

你可以使用 Hash 和 数组的值作为缓存键。

<ruby>
# This is a legal cache key
Rails.cache.read(:site => "mysite", :owners => [owner_1, owner_2])
</ruby>

你在 +Rails.cache+ 中使用的键和这些在实际中使用的存储引擎中使用的键不一样。他们可能会修改一个命名空间或改变以适应技术的后端约束。这意味着，例如，你不能使用 +Rails.cache+ 保存值，然后尝试使用 +memcache-client+ gem 来获取值。然而，你也不需要担心超出 memcached 限制的大小和违反语法规则。

h3. 有条件的 GET 支持

有条件的 GET 是 HTTP 规格的一个特性，它为 web 服务提供一种方式来告知浏览器对一个 GET 请求的响应与上一个的请求没有变化，可以安全的从浏览器缓存中获取。

通过使用 +HTTP_IF_NONE_MATCH+ 和 +HTTP_IF_MODIFIED_SINCE+ 头部来传递返回唯一的内容标识和内容上次更改的时间戳。如果浏览器发起一个请求，它的内容标识（etag）或者上次更改的时间戳匹配服务器的版本，之后服务器只需要发送会一个包含未更改状态的空响应。

查看上次更改的时间戳和 if-none-match 头部以及决定是否发送整个响应 是服务器（例如我们）的负责的。在 Rails 中使用 conditional-get 支持是非常简单的：

<ruby>
class ProductsController < ApplicationController

  def show
    @product = Product.find(params[:id])

    # If the request is stale according to the given timestamp and etag value
    # (i.e. it needs to be processed again) then execute this block
    if stale?(:last_modified => @product.updated_at.utc, :etag => @product)
      respond_to do |wants|
        # ... normal response processing
      end
    end

    # If the request is fresh (i.e. it's not modified) then you don't need to do
    # anything. The default render checks for this using the parameters
    # used in the previous call to stale? and will automatically send a
    # :not_modified. So that's it, you're done.
  end
end
</ruby>

If you don't have any special response processing and are using the default rendering mechanism (i.e. you're not using respond_to or calling render yourself) then you’ve got an easy helper in fresh_when:

如果你没有任何特殊的响应过程，且使用默认的渲染机制（例如：没有使用 respond_to 或者自己调用渲染），则你可以使用简单的fresh_when 这个helper方法：

<ruby>
class ProductsController < ApplicationController

  # This will automatically send back a :not_modified if the request is fresh,
  # and will render the default template (product.*) if it's stale.

  def show
    @product = Product.find(params[:id])
    fresh_when :last_modified => @product.published_at.utc, :etag => @product
  end
end
</ruby>

h3. 更多阅读

* "Scaling Rails Screencasts":http://railslab.newrelic.com/scaling-rails

h2. 测试 Rails 应用指南

本指南包括由 Rails 提供的内置结构来测试你的应用程序。参照本指南，你将能够:

* 了解 Rails 测试术语
* 为你的应用程序编写单元测试, 功能测试, 以及集成测试
* 认同其他流行的测试方法以及插件

本指南将不会教你写一个 Rails 应用, 它假定你已熟悉基本的 Rails 的操作方法

endprologue.

h3. 为什么要为你的 Rails 应用程序写测试?

* Rails 让你写测试超级容易。当你创建一个模型(Model)和控制器(Controller)的时候，它在后台建立一个测试代码的骨架。
* 只需要运行你的 Rails 测试，你就可以确定那些所需功能的代码，甚至一些主要的重构代码。
* Rails 测试还可以模拟浏览器请求，因此你无需通过浏览器进行测试就能测试你的应用程序的响应。

h3. 测试介绍

测试支持一开始就被编织进了 Rails 组织结构。这不是一个“哦！让我们死心踏地的支持运行测试吧，因为它们很酷很新”的顿悟。几乎每个 Rails 应用程序都会和数据库进行大量的交互 － 并且，这样的结果就是你的测试将也需要一个数据库来与之交互。要编写一个高效的测试，你需要了解如何建立这个数据库并且填充样式数据。

h4. 使用的三个环境

你建立的么一个 Rails 应用都有3个方面：一个方面用于生产，一个方面用于开发，以及一个方面用于测试。

在 +config/database.yml+ 文档中你可以发现这个的不同。这个 YAML 这个配置文件有 3 个独立的部分，分别定义了 3 个独立的数据库设置：

* 生产环境
* 开发环境
* 测试环境

这将允许你设置并且和测试数据交互，而且在你改动测试数据时将不会对你的生产环境有任何风险。

例如，假设你想测试你的 +delete_this_user_and_every_everything_associated_with_it+ 新函数。当你在销毁数据或者不这样做时，难道你不想在一个没有任何区别的环境中运行么？

当你最终销毁你的测试数据库时(这会发生的，相信我)，你可以你根据在开发数据库中定义的规格从头开始重新建立它。你可以这样操作，运行 +rake db:test:prepare+ 。

h4. Rails 会随着命令的敲击而建立测试

当你使用 +rails new+ _application_name_ 命令来创建一个 Rails 项目的同时Rails 会为你建立一个 +test+ 文件夹。如果你把文件夹中的内容罗列出来，你将会看到：

<shell>
$ ls -F test/

fixtures/       functional/     integration/    test_helper.rb  unit/
</shell>

这个 +unit+ 文件夹是指为你保存模型(Model)测试，+functional+ 这个文件夹是指为你保存控制器(Controller)测试，以及 +integration+ 文件夹是指为你保存那些设计任何交互控制器的测试。夹具(Fixtures)是组织测试数据的一种方法；它们所属于 +fixtures+ 文件夹。这个 +test_help.rb+ 文件保存了你的测试的默认配置。

h4. The Low-Down on Fixtures

至于一个好的测试，你将需要给予更多的想法来建立测试数据。在 Rails 中，你可以由自定义夹具(Fixtures) 来操作它。

h5. 什么是测试夹具?

_夹具(Fixtures)_ 对于样本数据是一个奇妙的词。夹具(Fixtures) 允许你在测试运行之前把预先定义的数据填充到你的测试数据库中。夹具(Fixtures) 是一个独立的数据库并呈现出一种单独的格式： *YAML* 。

你将会在你的 +test/fixtures+ 目录下找到测试夹具。当你运行 +rails generate model+ 来创建一个新的模型，fixture stubs 将会被自动创建并且被放置于这个目录中。

h5. YAML

YAML 格式的 fixture 是一个以自然语言的方式来描述你的样本数据。这种类型的 fixtures 具有 *.yml* 文件后缀（比如 +user.yml+ ）。

这里是一个 YAML fixture 文件的示例：

<yaml>
# lo & behold!  I am a YAML comment!
david:
 name: David Heinemeier Hansson
 birthday: 1979-10-15
 profession: Systems development

steve:
 name: Steve Ross Kellock
 birthday: 1974-09-27
 profession: guy with keyboard
</yaml>

每一个 fixture 被给予一个命名，后面给随着由冒号分隔开的由 键/值 对组成的列表。每条记录是由换行所分开。你可以使用 # 字符把注释放置于 fixture 文件的第一列。

h5. ERB'in It Up

ERB 允许你在模板中插入 ruby 代码。当你加载 fixtures 时，YAML fixture 格式将会使用 ERB 被预先处理。这将会允许你使用 Ruby 来帮助你产生一些样本数据。

<erb>
<% earth_size = 20 %>
mercury:
  size: <%= earth_size / 50 %>
  brightest_on: <%= 113.days.ago.to_s(:db) %>

venus:
  size: <%= earth_size / 2 %>
  brightest_on: <%= 67.days.ago.to_s(:db) %>

mars:
  size: <%= earth_size - 69 %>
  brightest_on: <%= 13.days.from_now.to_s(:db) %>
</erb>

任何被包括在标签

<erb>
<% %>
</erb>

中的会被认为是 Ruby 代码。当这个 fixture 被加载时，这三条记录的 +size+ 属性将会被分别设置为 20/50，20/2，以及 20-69 。+brightest_on+ 属性也将会被 Rails 赋值并且格式化来和数据库兼容。

h5. Fixtures in Action

Rails 默认会为你的单元测试和功能测试加载 +test/fixtures+ 文件夹中的所有 fixtures 。加载包含三个步骤：

* 从与这个 fixture 对应的数据表中移除所有的已存在的数据。
* 加载 fixture 数据到数据表中。
* 把 fixture 数据转储到一个变量中以防你想要直接访问它。

h5. Fixtures 是 ActiveRecord 对象

Fixtures 是 ActiveRecord 实例。在上面提到的第三点中，你可以直接访问这个对象，是因为它自动设置为测试情形下的一个本地变量。例如：

<ruby>
# 这将会为 fixture 返回被命名为 david 的 User 对象
users(:david)

# 这将会返回 david 的 id 属性
users(:david).id

# 同时也可以访问 User 类的可用方法
email(david.girlfriend.email, david.location_tonight)
</ruby>

h3. 单元测试你的模型(Models)

在 Rails 中，单元测试是你写出来测试你的模型的。

在这个指南中我将使用 Rails 的 _scaffolding_ 。它将会在一个单独的 opration 中为一个新的 resource 创建模型，一个 migration ，控制器和视图。它也会遵循 Rails 最佳实践来创建一个完全的测试套件。我将使用这样产生的代码作为示例并且会在需要的地方增加示例来补充。

NOTE: 关于 Rails <i>scaffolding</i> 的更多信息，查看 "Rails 初上手":getting_started.html

当你使用 +rails generate scaffold+ 时，它将会在 +test/unit+ 文件夹中为一个在其它一些东西中的 resource 创建一个 test stub ：

<shell>
$ rails generate scaffold post title:string body:text
...
create  app/models/post.rb
create  test/unit/post_test.rb
create  test/fixtures/posts.yml
...
</shell>

默认的 test stub 在 +test/unit/post_test.rb+ ，看起来像这样：

<ruby>
require 'test_helper'

class PostTest < ActiveSupport::TestCase
  # Replace this with your real tests.
  test "the truth" do
    assert true
  end
end
</ruby>

一行一行的检查该文件将会有助于你面向理解 Rails 测试代码和术语。

<ruby>
require 'test_helper'
</ruby>

正如你现在所知道的，+test_helper.rb+ 指定了默认的设置来运行我们的测试。这会被所有的测试所包括，所以任何一个你加入的这个文件的方法会对你的所有测试有效。

<ruby>
class PostTest < ActiveSupport::TestCase
</ruby>

+PostTest+ 类指定了一个 _test case_ 因为它继承于 +ActiveSupport::TestCase+ 。+PostTest+ 因此拥有源自于 +ActiceSupport::TestCase+ 所有的可用方法。稍后你将会在此指南中看到这些方法。

任何由 +test+ （区分大小写）开头，在一个 +Test::Unit+ 测试用例中指定的方法会被一个测试所调用。所以，+test_password+，+test_valid_password+ 以及 +testValidPassword+ 所有这些都是合法的测试命名并且当测试用例运行时也会自动运行。

Rails 增加了一个 +test+ 方法，它取了一个测试名称和数据块。它产生了一个标准 +Test::Unit+ 测试，它的方法名称有 +test_+ 前缀。所以，

<ruby>
test "the truth" do
  assert true
end
</ruby>

编译为

<ruby>
def test_the_truth
  assert true
end
</ruby>

只有 +test+ 宏允许更多可读的测试名称。然而你仍然可以使用规则的方法定义。

NOTE: 方法的名称是由下划线取代了空格。虽然这样并不需要是一个有效的 Ruby 标识符，但是该名称可能会包含标点字符等。这是因为在 Ruby 语言中，任何字符串可能是一个方法的名称。少数的字符串需要 +define_method+ 和 +send+ 调用，但是没有正式的限制。

<ruby>
assert true
</ruby>

这一行代码被称作一个 _断言_ _assertion_ 。断言是一行代码，它可以为预期结果评估（或者阐述）一个对象。例如，断言可以检查：

* 是否这个值 ＝ 另一个值？
* 这个对象是否为空？
* 这样代码是否会抛出异常？
* 是否这个用户的密码大于 5 个字符？

每个测试包含一个或多个断言。只有当所有断言都成功时，测试才会通过。

h4. 测试应用程序的准备工作

在你运行测试之前，你需要确认测试数据库结构当前可用。为此你可以使用下面的 rake 命令：

<shell>
$ rake db:migrate
...
$ rake db:test:load
</shell>

上面的 +rake db:migrate+ 在 _development_ 环境运行了待处理的 migrations 并且更新了 +db/schema.rb+ 。+rake db:test:load+ 由当前 +db/schema.rb+ 重新建立了测试数据库。在接下来的尝试中，首先运行 +db:test:prepare+ 是一个好主意，因为它首先检查待处理的 magrations 并且适当的向你发出警告。

NOTE: 如果 +db/schema.rb+ 不存在，+db:test:prepare+ 将会由一个错误而失败。

h5. 测试准备工作的 Rake 任务

|_.任务                          |_.描述|
|+rake db:test:clone+            |由当前环境的数据库 schema 重建测试数据库|
|+rake db:test:clone_structure+  |由 structure 中重建测试数据|
|+rake db:test:load+             |由当前 +schema.rb+ 重建测试数据|
|+rake db:test:prepare+          |检查待处理的 migrations 并且加载测试 schema|
|+rake db:test:purge+            |清空测试数据。|

TIP: 运行 +rake --tasks --describe+ ，你就会看到所有的 rake 任务以及它们的描述

h4. 运行测试

运行测试是非常简单的，通过 Ruby 调用包含测试实例的文件即可。

<shell>
$ ruby -Itest test/unit/post_test.rb

Loaded suite unit/post_test
Started
.
Finished in 0.023513 seconds.

1 tests, 1 assertions, 0 failures, 0 errors
</shell>

这将会从测试实例中运行所有的测试方法。注意，+test_help.rb+ 在 +test+ 目录中，因此这个目录需要通过使用 +-I+ 参数来添加到加载路径。

你也可以通过使用 +-n+ 参数加 +测试方法名称+ 来运行测试实例中个别的测试方法。

<shell>
$ ruby -Itest test/unit/post_test.rb -n test_the_truth

Loaded suite unit/post_test
Started
.
Finished in 0.023513 seconds.

1 tests, 1 assertions, 0 failures, 0 errors
</shell>

上面的 +.+ （点）表示测试通过。当一个测试失败时，你将会看到 +F+ ；当测试抛出一个错误时你会在那个地方看到 +E+ 。输出内容的最后一行是概要。

你可以在 +post_test.rb+ 测试实例中增加一个失败的测试来看看测试失败如何报告。

<ruby>
test "should not save post without title" do
  post = Post.new
  assert !post.save
end
</ruby>

让我们运行一下这个刚刚增加的测试。

<shell>
$ ruby unit/post_test.rb -n test_should_not_save_post_without_title
Loaded suite -e
Started
F
Finished in 0.102072 seconds.

  1) Failure:
test_should_not_save_post_without_title(PostTest) [/test/unit/post_test.rb:6]:
<false> is not true.

1 tests, 1 assertions, 1 failures, 0 errors
</shell>

在这个输出中，+F+ 表示失败。你可以看到对应的 trace ，在 1) 后面紧跟这失败信息的名称。接下来的几行包含了堆积的 trace ，它们后面跟随着有关断言涉及到的实际值和期许值的信息。默认的断言信息提供仅仅足够强调错误的信息。为了是这个断言失败的信息更加可读，每个 assertion 提供了一个可选的信息参数，如下所示：

<ruby>
test "should not save post without title" do
  post = Post.new
  assert !post.save, "Saved the post without a title"
end
</ruby>

运行这个测试将会显示更加友好的断言信息：

<shell>
  1) Failure:
test_should_not_save_post_without_title(PostTest) [/test/unit/post_test.rb:6]:
Saved the post without a title.
<false> is not true.
</shell>

现在为了使这个测试通过，我们可以为 _title_ 这个字段增加一个 model 级的验证。

<ruby>
class Post < ActiveRecord::Base
  validates :title, :presence => true
end
</ruby>

现在这个测试将会通过。让我们通过再一次运行测试来验证一下：

<shell>
$ ruby unit/post_test.rb -n test_should_not_save_post_without_title
Loaded suite unit/post_test
Started
.
Finished in 0.193608 seconds.

1 tests, 1 assertions, 0 failures, 0 errors
</shell>

现在，也许你已经注意到了，我们写了一个对于需求功能没有通过的测试，然后我们在需求功能中加入了一些代码并且最终确保了我们的测试通过。这种软件开发模式就是所提及的 测试驱动开发模式 (TDD)。

TIP: 许多 Rails 开发者实践 _Test-Driven Developmet_ （TDD）。这是一中非常出色的方式来建立一个可以执行应用程序每一部分的测试套件。TDD 已经超出了本指南的范围，但是你可以从这里开始入 "15 TDD steps to create a Rails application":http://andrzejonsoftware.blogspot.com/2007/05/15-tdd-steps-to-create-rails.html 。

来看一下错误是如何被报出的，这里是一个包含了错误的测试：

<ruby>
test "should report error" do
  # some_undefined_variable 没有在测试实例的任何地方被定义
  some_undefined_variable
  assert true
end
</ruby>

运行测试后，现在你可以在终端中看到更多的输出：

<shell>
$ ruby unit/post_test.rb -n test_should_report_error
Loaded suite -e
Started
E
Finished in 0.082603 seconds.

  1) Error:
test_should_report_error(PostTest):
NameError: undefined local variable or method `some_undefined_variable' for #<PostTest:0x249d354>
    /test/unit/post_test.rb:6:in `test_should_report_error'

1 tests, 0 assertions, 0 failures, 1 errors
</shell>

注意这个在输出中的 'E' 。它表示测试有错误发生。

NOTE: 每一个测试方法一旦遇到任何错误或者断言失效就会停止执行，并且测试套件会继续执行下一个方法。所有测试方法将会按照字母顺序来执行。

h4. What to Include in Your Unit Tests

Ideally, you would like to include a test for everything which could possibly break. It's a good practice to have at least one test for each of your validations and at least one test for every method in your model.

h4. Assertions Available

By now you've caught a glimpse of some of the assertions that are available. Assertions are the worker bees of testing. They are the ones that actually perform the checks to ensure that things are going as planned.

There are a bunch of different types of assertions you can use. Here's the complete list of assertions that ship with +test/unit+, the default testing library used by Rails. The +[msg]+ parameter is an optional string message you can specify to make your test failure messages clearer. It's not required.

|_.Assertion                                                       |_.Purpose|
|+assert( boolean, [msg] )+                                        |Ensures that the object/expression is true.|
|+assert_equal( obj1, obj2, [msg] )+                               |Ensures that +obj1 == obj2+ is true.|
|+assert_not_equal( obj1, obj2, [msg] )+                           |Ensures that +obj1 == obj2+ is false.|
|+assert_same( obj1, obj2, [msg] )+                                |Ensures that +obj1.equal?(obj2)+ is true.|
|+assert_not_same( obj1, obj2, [msg] )+                            |Ensures that +obj1.equal?(obj2)+ is false.|
|+assert_nil( obj, [msg] )+                                        |Ensures that +obj.nil?+ is true.|
|+assert_not_nil( obj, [msg] )+                                    |Ensures that +obj.nil?+ is false.|
|+assert_match( regexp, string, [msg] )+                           |Ensures that a string matches the regular expression.|
|+assert_no_match( regexp, string, [msg] )+                        |Ensures that a string doesn't match the regular expression.|
|+assert_in_delta( expecting, actual, delta, [msg] )+              |Ensures that the numbers +expecting+ and +actual+ are within +delta+ of each other.|
|+assert_throws( symbol, [msg] ) { block }+                        |Ensures that the given block throws the symbol.|
|+assert_raise( exception1, exception2, ... ) { block }+           |Ensures that the given block raises one of the given exceptions.|
|+assert_nothing_raised( exception1, exception2, ... ) { block }+  |Ensures that the given block doesn't raise one of the given exceptions.|
|+assert_instance_of( class, obj, [msg] )+                         |Ensures that +obj+ is of the +class+ type.|
|+assert_kind_of( class, obj, [msg] )+                             |Ensures that +obj+ is or descends from +class+.|
|+assert_respond_to( obj, symbol, [msg] )+                         |Ensures that +obj+ has a method called +symbol+.|
|+assert_operator( obj1, operator, obj2, [msg] )+                  |Ensures that +obj1.operator(obj2)+ is true.|
|+assert_send( array, [msg] )+                                     |Ensures that executing the method listed in +array[1]+ on the object in +array[0]+ with the parameters of +array[2 and up]+ is true. This one is weird eh?|
|+flunk( [msg] )+                                                  |Ensures failure. This is useful to explicitly mark a test that isn't finished yet.|

Because of the modular nature of the testing framework, it is possible to create your own assertions. In fact, that's exactly what Rails does. It includes some specialized assertions to make your life easier.

NOTE: Creating your own assertions is an advanced topic that we won't cover in this tutorial.

h4. Rails Specific Assertions

Rails adds some custom assertions of its own to the +test/unit+ framework:

NOTE: +assert_valid(record)+ has been deprecated. Please use +assert(record.valid?)+ instead.

|_.Assertion                                                                        |_.Purpose|
|+assert_valid(record)+                                                             |Ensures that the passed record is valid by Active Record standards and returns any error messages if it is not.|
|+assert_difference(expressions, difference = 1, message = nil) {...}+              |Test numeric difference between the return value of an expression as a result of what is evaluated in the yielded block.|
|+assert_no_difference(expressions, message = nil, &amp;block)+                     |Asserts that the numeric result of evaluating an expression is not changed before and after invoking the passed in block.|
|+assert_recognizes(expected_options, path, extras={}, message=nil)+                |Asserts that the routing of the given path was handled correctly and that the parsed options (given in the expected_options hash) match path. Basically, it asserts that Rails recognizes the route given by expected_options.|
|+assert_generates(expected_path, options, defaults={}, extras = {}, message=nil)+  |Asserts that the provided options can be used to generate the provided path. This is the inverse of assert_recognizes. The extras parameter is used to tell the request the names and values of additional request parameters that would be in a query string. The message parameter allows you to specify a custom error message for assertion failures.|
|+assert_response(type, message = nil)+                                             |Asserts that the response comes with a specific status code. You can specify +:success+ to indicate 200,  +:redirect+ to indicate 300-399, +:missing+ to indicate 404, or +:error+ to match the 500-599 range|
|+assert_redirected_to(options = {}, message=nil)+                                  |Assert that the redirection options passed in match those of the redirect called in the latest action. This match can be partial, such that +assert_redirected_to(:controller => "weblog")+ will also match the redirection of +redirect_to(:controller => "weblog", :action => "show")+ and so on.|
|+assert_template(expected = nil, message=nil)+                                     |Asserts that the request was rendered with the appropriate template file.|

You'll see the usage of some of these assertions in the next chapter.

h3. Functional Tests for Your Controllers

In Rails, testing the various actions of a single controller is called writing functional tests for that controller. Controllers handle the incoming web requests to your application and eventually respond with a rendered view.

h4. What to Include in your Functional Tests

You should test for things such as:

* was the web request successful?
* was the user redirected to the right page?
* was the user successfully authenticated?
* was the correct object stored in the response template?
* was the appropriate message displayed to the user in the view?

Now that we have used Rails scaffold generator for our +Post+ resource, it has already created the controller code and functional tests. You can take look at the file +posts_controller_test.rb+ in the +test/functional+ directory.

Let me take you through one such test, +test_should_get_index+ from the file +posts_controller_test.rb+.

<ruby>
test "should get index" do
  get :index
  assert_response :success
  assert_not_nil assigns(:posts)
end
</ruby>

In the +test_should_get_index+ test, Rails simulates a request on the action called +index+, making sure the request was successful and also ensuring that it assigns a valid +posts+ instance variable.

The +get+ method kicks off the web request and populates the results into the response. It accepts 4 arguments:

* The action of the controller you are requesting. This can be in the form of a string or a symbol.
* An optional hash of request parameters to pass into the action (eg. query string parameters or post variables).
* An optional hash of session variables to pass along with the request.
* An optional hash of flash values.

Example: Calling the +:show+ action, passing an +id+ of 12 as the +params+ and setting a +user_id+ of 5 in the session:

<ruby>
get(:show, {'id' => "12"}, {'user_id' => 5})
</ruby>

Another example: Calling the +:view+ action, passing an +id+ of 12 as the +params+, this time with no session, but with a flash message.

<ruby>
get(:view, {'id' => '12'}, nil, {'message' => 'booya!'})
</ruby>

NOTE: If you try running +test_should_create_post+ test from +posts_controller_test.rb+ it will fail on account of the newly added model level validation and rightly so.

Let us modify +test_should_create_post+ test in +posts_controller_test.rb+ so that all our test pass:

<ruby>
test "should create post" do
  assert_difference('Post.count') do
    post :create, :post => { :title => 'Some title'}
  end

  assert_redirected_to post_path(assigns(:post))
end
</ruby>

Now you can try running all the tests and they should pass.

h4. Available Request Types for Functional Tests

If you're familiar with the HTTP protocol, you'll know that +get+ is a type of request. There are 6 request types supported in Rails functional tests:

* +get+
* +post+
* +patch+
* +put+
* +head+
* +delete+

All of request types are methods that you can use, however, you'll probably end up using the first two more often than the others.

NOTE: Functional tests do not verify whether the specified request type should be accepted by the action. Request types in this context exist to make your tests more descriptive.

h4. The Four Hashes of the Apocalypse

After a request has been made by using one of the 5 methods (+get+, +post+, etc.) and processed, you will have 4 Hash objects ready for use:

* +assigns+ - Any objects that are stored as instance variables in actions for use in views.
* +cookies+ - Any cookies that are set.
* +flash+ - Any objects living in the flash.
* +session+ - Any object living in session variables.

As is the case with normal Hash objects, you can access the values by referencing the keys by string. You can also reference them by symbol name, except for +assigns+. For example:

<ruby>
flash["gordon"]               flash[:gordon]
session["shmession"]          session[:shmession]
cookies["are_good_for_u"]     cookies[:are_good_for_u]

# Because you can't use assigns[:something] for historical reasons:
assigns["something"]          assigns(:something)
</ruby>

h4. Instance Variables Available

You also have access to three instance variables in your functional tests:

* +@controller+ - The controller processing the request
* +@request+ - The request
* +@response+ - The response

h4. A Fuller Functional Test Example

Here's another example that uses +flash+, +assert_redirected_to+, and +assert_difference+:

<ruby>
test "should create post" do
  assert_difference('Post.count') do
    post :create, :post => { :title => 'Hi', :body => 'This is my first post.'}
  end
  assert_redirected_to post_path(assigns(:post))
  assert_equal 'Post was successfully created.', flash[:notice]
end
</ruby>

h4. Testing Views

Testing the response to your request by asserting the presence of key HTML elements and their content is a useful way to test the views of your application. The +assert_select+ assertion allows you to do this by using a simple yet powerful syntax.

NOTE: You may find references to +assert_tag+ in other documentation, but this is now deprecated in favor of +assert_select+.

There are two forms of +assert_select+:

+assert_select(selector, [equality], [message])+ ensures that the equality condition is met on the selected elements through the selector. The selector may be a CSS selector expression (String), an expression with substitution values, or an +HTML::Selector+ object.

+assert_select(element, selector, [equality], [message])+ ensures that the equality condition is met on all the selected elements through the selector starting from the _element_ (instance of +HTML::Node+) and its descendants.

For example, you could verify the contents on the title element in your response with:

<ruby>
assert_select 'title', "Welcome to Rails Testing Guide"
</ruby>

You can also use nested +assert_select+ blocks. In this case the inner +assert_select+ runs the assertion on the complete collection of elements selected by the outer +assert_select+ block:

<ruby>
assert_select 'ul.navigation' do
  assert_select 'li.menu_item'
end
</ruby>

Alternatively the collection of elements selected by the outer +assert_select+ may be iterated through so that +assert_select+ may be called separately for each element. Suppose for example that the response contains two ordered lists, each with four list elements then the following tests will both pass.

<ruby>
assert_select "ol" do |elements|
  elements.each do |element|
    assert_select element, "li", 4
  end
end

assert_select "ol" do
  assert_select "li", 8
end
</ruby>

The +assert_select+ assertion is quite powerful. For more advanced usage, refer to its "documentation":http://api.rubyonrails.org/classes/ActionDispatch/Assertions/SelectorAssertions.html.

h5. Additional View-Based Assertions

There are more assertions that are primarily used in testing views:

|_.Assertion                                                                        |_.Purpose|
|+assert_select_email+                                                              |Allows you to make assertions on the body of an e-mail. |
|+assert_select_encoded+                                                            |Allows you to make assertions on encoded HTML. It does this by un-encoding the contents of each element and then calling the block with all the un-encoded elements.|
|+css_select(selector)+  or +css_select(element, selector)+                         |Returns an array of all the elements selected by the _selector_. In the second variant it first matches the base _element_ and tries to match the _selector_ expression on any of its children. If there are no matches both variants return an empty array.|

Here's an example of using +assert_select_email+:

<ruby>
assert_select_email do
  assert_select 'small', 'Please click the "Unsubscribe" link if you want to opt-out.'
end
</ruby>

h3. Integration Testing

Integration tests are used to test the interaction among any number of controllers. They are generally used to test important work flows within your application.

Unlike Unit and Functional tests, integration tests have to be explicitly created under the 'test/integration' folder within your application. Rails provides a generator to create an integration test skeleton for you.

<shell>
$ rails generate integration_test user_flows
      exists  test/integration/
      create  test/integration/user_flows_test.rb
</shell>

Here's what a freshly-generated integration test looks like:

<ruby>
require 'test_helper'

class UserFlowsTest < ActionDispatch::IntegrationTest
  fixtures :all

  # Replace this with your real tests.
  test "the truth" do
    assert true
  end
end
</ruby>

Integration tests inherit from +ActionDispatch::IntegrationTest+. This makes available some additional helpers to use in your integration tests. Also you need to explicitly include the fixtures to be made available to the test.

h4. Helpers Available for Integration Tests

In addition to the standard testing helpers, there are some additional helpers available to integration tests:

|_.Helper                                                                           |_.Purpose|
|+https?+                                                                           |Returns +true+ if the session is mimicking a secure HTTPS request.|
|+https!+                                                                           |Allows you to mimic a secure HTTPS request.|
|+host!+                                                                            |Allows you to set the host name to use in the next request.|
|+redirect?+                                                                        |Returns +true+ if the last request was a redirect.|
|+follow_redirect!+                                                                 |Follows a single redirect response.|
|+request_via_redirect(http_method, path, [parameters], [headers])+                 |Allows you to make an HTTP request and follow any subsequent redirects.|
|+post_via_redirect(path, [parameters], [headers])+                                 |Allows you to make an HTTP POST request and follow any subsequent redirects.|
|+get_via_redirect(path, [parameters], [headers])+                                  |Allows you to make an HTTP GET request and follow any subsequent redirects.|
|+patch_via_redirect(path, [parameters], [headers])+                                |Allows you to make an HTTP PATCH request and follow any subsequent redirects.|
|+put_via_redirect(path, [parameters], [headers])+                                  |Allows you to make an HTTP PUT request and follow any subsequent redirects.|
|+delete_via_redirect(path, [parameters], [headers])+                               |Allows you to make an HTTP DELETE request and follow any subsequent redirects.|
|+open_session+                                                                     |Opens a new session instance.|

h4. Integration Testing Examples

A simple integration test that exercises multiple controllers:

<ruby>
require 'test_helper'

class UserFlowsTest < ActionDispatch::IntegrationTest
  fixtures :users

  test "login and browse site" do
    # login via https
    https!
    get "/login"
    assert_response :success

    post_via_redirect "/login", :username => users(:avs).username, :password => users(:avs).password
    assert_equal '/welcome', path
    assert_equal 'Welcome avs!', flash[:notice]

    https!(false)
    get "/posts/all"
    assert_response :success
    assert assigns(:products)
  end
end
</ruby>

As you can see the integration test involves multiple controllers and exercises the entire stack from database to dispatcher. In addition you can have multiple session instances open simultaneously in a test and extend those instances with assertion methods to create a very powerful testing DSL (domain-specific language) just for your application.

Here's an example of multiple sessions and custom DSL in an integration test

<ruby>
require 'test_helper'

class UserFlowsTest < ActionDispatch::IntegrationTest
  fixtures :users

  test "login and browse site" do

    # User avs logs in
    avs = login(:avs)
    # User guest logs in
    guest = login(:guest)

    # Both are now available in different sessions
    assert_equal 'Welcome avs!', avs.flash[:notice]
    assert_equal 'Welcome guest!', guest.flash[:notice]

    # User avs can browse site
    avs.browses_site
    # User guest can browse site as well
    guest.browses_site

    # Continue with other assertions
  end

  private

  module CustomDsl
    def browses_site
      get "/products/all"
      assert_response :success
      assert assigns(:products)
    end
  end

  def login(user)
    open_session do |sess|
      sess.extend(CustomDsl)
      u = users(user)
      sess.https!
      sess.post "/login", :username => u.username, :password => u.password
      assert_equal '/welcome', path
      sess.https!(false)
    end
  end
end
</ruby>

h3. Rake Tasks for Running your Tests

You don't need to set up and run your tests by hand on a test-by-test basis. Rails comes with a number of rake tasks to help in testing. The table below lists all rake tasks that come along in the default Rakefile when you initiate a Rails project.

|_.Tasks                         |_.Description|
|+rake test+                     |Runs all unit, functional and integration tests. You can also simply run +rake+ as the _test_ target is the default.|
|+rake test:benchmark+           |Benchmark the performance tests|
|+rake test:functionals+         |Runs all the functional tests from +test/functional+|
|+rake test:integration+         |Runs all the integration tests from +test/integration+|
|+rake test:profile+             |Profile the performance tests|
|+rake test:recent+              |Tests recent changes|
|+rake test:uncommitted+         |Runs all the tests which are uncommitted. Supports Subversion and Git|
|+rake test:units+               |Runs all the unit tests from +test/unit+|


h3. Brief Note About +Test::Unit+

Ruby ships with a boat load of libraries. One little gem of a library is +Test::Unit+, a framework for unit testing in Ruby. All the basic assertions discussed above are actually defined in +Test::Unit::Assertions+. The class +ActiveSupport::TestCase+ which we have been using in our unit and functional tests extends +Test::Unit::TestCase+, allowing
us to use all of the basic assertions in our tests.

NOTE: For more information on +Test::Unit+, refer to "test/unit Documentation":http://ruby-doc.org/stdlib/libdoc/test/unit/rdoc/

h3. Setup and Teardown

If you would like to run a block of code before the start of each test and another block of code after the end of each test you have two special callbacks for your rescue. Let's take note of this by looking at an example for our functional test in +Posts+ controller:

<ruby>
require 'test_helper'

class PostsControllerTest < ActionController::TestCase

  # called before every single test
  def setup
    @post = posts(:one)
  end

  # called after every single test
  def teardown
    # as we are re-initializing @post before every test
    # setting it to nil here is not essential but I hope
    # you understand how you can use the teardown method
    @post = nil
  end

  test "should show post" do
    get :show, :id => @post.id
    assert_response :success
  end

  test "should destroy post" do
    assert_difference('Post.count', -1) do
      delete :destroy, :id => @post.id
    end

    assert_redirected_to posts_path
  end

end
</ruby>

Above, the +setup+ method is called before each test and so +@post+ is available for each of the tests. Rails implements +setup+ and +teardown+ as +ActiveSupport::Callbacks+. Which essentially means you need not only use +setup+ and +teardown+ as methods in your tests. You could specify them by using:

* a block
* a method (like in the earlier example)
* a method name as a symbol
* a lambda

Let's see the earlier example by specifying +setup+ callback by specifying a method name as a symbol:

<ruby>
require '../test_helper'

class PostsControllerTest < ActionController::TestCase

  # called before every single test
  setup :initialize_post

  # called after every single test
  def teardown
    @post = nil
  end

  test "should show post" do
    get :show, :id => @post.id
    assert_response :success
  end

  test "should update post" do
    patch :update, :id => @post.id, :post => { }
    assert_redirected_to post_path(assigns(:post))
  end

  test "should destroy post" do
    assert_difference('Post.count', -1) do
      delete :destroy, :id => @post.id
    end

    assert_redirected_to posts_path
  end

  private

  def initialize_post
    @post = posts(:one)
  end

end
</ruby>

h3. Testing Routes

Like everything else in your Rails application, it is recommended that you test your routes. An example test for a route in the default +show+ action of +Posts+ controller above should look like:

<ruby>
test "should route to post" do
  assert_routing '/posts/1', { :controller => "posts", :action => "show", :id => "1" }
end
</ruby>

h3. Testing Your Mailers

Testing mailer classes requires some specific tools to do a thorough job.

h4. Keeping the Postman in Check

Your mailer classes -- like every other part of your Rails application -- should be tested to ensure that it is working as expected.

The goals of testing your mailer classes are to ensure that:

* emails are being processed (created and sent)
* the email content is correct (subject, sender, body, etc)
* the right emails are being sent at the right times

h5. From All Sides

There are two aspects of testing your mailer, the unit tests and the functional tests. In the unit tests, you run the mailer in isolation with tightly controlled inputs and compare the output to a known value (a fixture.) In the functional tests you don't so much test the minute details produced by the mailer; instead, we test that our controllers and models are using the mailer in the right way. You test to prove that the right email was sent at the right time.

h4. Unit Testing

In order to test that your mailer is working as expected, you can use unit tests to compare the actual results of the mailer with pre-written examples of what should be produced.

h5. Revenge of the Fixtures

For the purposes of unit testing a mailer, fixtures are used to provide an example of how the output _should_ look. Because these are example emails, and not Active Record data like the other fixtures, they are kept in their own subdirectory apart from the other fixtures. The name of the directory within +test/fixtures+ directly corresponds to the name of the mailer. So, for a mailer named +UserMailer+, the fixtures should reside in +test/fixtures/user_mailer+ directory.

When you generated your mailer, the generator creates stub fixtures for each of the mailers actions. If you didn't use the generator you'll have to make those files yourself.

h5. The Basic Test Case

Here's a unit test to test a mailer named +UserMailer+ whose action +invite+ is used to send an invitation to a friend. It is an adapted version of the base test created by the generator for an +invite+ action.

<ruby>
require 'test_helper'

class UserMailerTest < ActionMailer::TestCase
  tests UserMailer
  test "invite" do
    @expected.from    = 'me@example.com'
    @expected.to      = 'friend@example.com'
    @expected.subject = "You have been invited by #{@expected.from}"
    @expected.body    = read_fixture('invite')
    @expected.date    = Time.now

    assert_equal @expected.encoded, UserMailer.create_invite('me@example.com', 'friend@example.com', @expected.date).encoded
  end

end
</ruby>

In this test, +@expected+ is an instance of +TMail::Mail+ that you can use in your tests. It is defined in +ActionMailer::TestCase+. The test above uses +@expected+ to construct an email, which it then asserts with email created by the custom mailer. The +invite+ fixture is the body of the email and is used as the sample content to assert against. The helper +read_fixture+ is used to read in the content from this file.

Here's the content of the +invite+ fixture:

<pre>
Hi friend@example.com,

You have been invited.

Cheers!
</pre>

This is the right time to understand a little more about writing tests for your mailers. The line +ActionMailer::Base.delivery_method = :test+ in +config/environments/test.rb+ sets the delivery method to test mode so that email will not actually be delivered (useful to avoid spamming your users while testing) but instead it will be appended to an array (+ActionMailer::Base.deliveries+).

However often in unit tests, mails will not actually be sent, simply constructed, as in the example above, where the precise content of the email is checked against what it should be.

h4. Functional Testing

Functional testing for mailers involves more than just checking that the email body, recipients and so forth are correct. In functional mail tests you call the mail deliver methods and check that the appropriate emails have been appended to the delivery list. It is fairly safe to assume that the deliver methods themselves do their job. You are probably more interested in whether your own business logic is sending emails when you expect them to go out. For example, you can check that the invite friend operation is sending an email appropriately:

<ruby>
require 'test_helper'

class UserControllerTest < ActionController::TestCase
  test "invite friend" do
    assert_difference 'ActionMailer::Base.deliveries.size', +1 do
      post :invite_friend, :email => 'friend@example.com'
    end
    invite_email = ActionMailer::Base.deliveries.last

    assert_equal "You have been invited by me@example.com", invite_email.subject
    assert_equal 'friend@example.com', invite_email.to[0]
    assert_match(/Hi friend@example.com/, invite_email.body)
  end
end
</ruby>

h3. Other Testing Approaches

The built-in +test/unit+ based testing is not the only way to test Rails applications. Rails developers have come up with a wide variety of other approaches and aids for testing, including:

* "NullDB":http://avdi.org/projects/nulldb/, a way to speed up testing by avoiding database use.
* "Factory Girl":https://github.com/thoughtbot/factory_girl/tree/master, a replacement for fixtures.
* "Machinist":https://github.com/notahat/machinist/tree/master, another replacement for fixtures.
* "Shoulda":http://www.thoughtbot.com/projects/shoulda, an extension to +test/unit+ with additional helpers, macros, and assertions.
* "RSpec":http://relishapp.com/rspec, a behavior-driven development framework

h2. Rails生成器及模板的创建与定制 

如果您计划改善工作流程，Rails 生成器 (generators)必不可少。您将通过本指南学到如何创建它们及定制一个现成的。

将为您呈现：

* 学习如何知道您的应用 (application) 中哪些生成器可用
* 使用模板创建生成器
* 学习如何在调用生成器前搜索它们
* 通过创建新的生成器定制您的scaffold
* 通过修改生成器模板定制您的scaffold
* 学习如何使用回退 (fallbacks) 避免覆盖一个庞大的生成器集合。
* 学习如何创建应用模板

endprologue.

NOTE: 本指南针对Rails 3，未涵盖之前的版本

h3. 初体验

当您使用 +rails+ 命令创建一个应用，实际上就是在使用Rails 生成器。而后，您可以通过调用 +rails generate+ 得到一份可用生成器列表：

<shell>
$ rails new myapp
$ cd myapp
$ rails generate
</shell>

您将获得一份完整的Rails原生生成器列表。如果您需要一个生成器的详细描述，例如 helper生成器，您只需这样:

<shell>
$ rails generate helper --help
</shell>

h3. 创建您的首个生成器

从Rails 3.0开始，生成器基于 "Thor":https://github.com/wycats/thor，Thor 提供强大的选项解析功能和一套牛逼的文件操纵API。例如，让我们创建一个生成器来生成 +config/initializers/initializer.rb+ 文件。

首先创建文件 +lib/generators/initializer_generator.rb+ ，其内容如下：

<ruby>
class InitializerGenerator < Rails::Generators::Base
  def create_initializer_file
    create_file "config/initializers/initializer.rb", "# Add initialization content here"
  end
end
</ruby>

NOTE: +create_file+ 方法由 +Thor::Actions+ 提供. 需要了解 +create_file+ 的文档及其他Thor方法敬请移步 "Thor's documentation":http://rdoc.info/github/wycats/thor/master/Thor/Actions.html

我们的新生成器有点单薄：它继承自 +Rails::Generators::Base+ 并仅有一个方法定义。当生成器被调用，每个生成器中的公共方法依照定义的次序执行。最终，我们调用 +create_file+ 方法，将创建一个给定内容给定位置的文件。如果您熟悉Rails 应用的模板API，您将对新的生成器API有宾至如归的感觉。

调用我们的新生成器，您只需:

<shell>
$ rails generate initializer
</shell>

在我们继续前，来看一下我们的全新生成器的描述：

<shell>
$ rails generate initializer --help
</shell>

要是生成器在命名空间下，Rails 一般都能够生成不错的描述，像是 +ActiveRecord::Generators::ModelGenerator+ ，但是像咱们这种特殊情况 (译注：InitializerGenerator在::下) 就不行了。解决这个问题，有两个选择。第一个在我们的生成器里调用 +desc+ ：

<ruby>
class InitializerGenerator < Rails::Generators::Base
  desc "This generator creates an initializer file at config/initializers"
  def create_initializer_file
    create_file "config/initializers/initializer.rb", "# Add initialization content here"
  end
end
</ruby>

现在我们能通过调用 +--help+ 看到新的生成器描述了。第二选择是在生成器同一目录下创建名为+USAGE+的文件。我们下一步就要这样做。


h3.  用生成器创建生成器

生成器自身拥有一个生成器：

<shell>
$ rails generate generator initializer
      create  lib/generators/initializer
      create  lib/generators/initializer/initializer_generator.rb
      create  lib/generators/initializer/USAGE
      create  lib/generators/initializer/templates
</shell>

刚建的生成器如下：

<ruby>
class InitializerGenerator < Rails::Generators::NamedBase
  source_root File.expand_path("../templates", __FILE__)
end
</ruby>

首先，注意我们继承自 +Rails::Generators::NamedBase+ 而不是 +Rails::Generators::Base+ 了。这意味着我们的生成器预期 (expects) 至少一个参数, 这个参数将作为initializer的名字，在我们的代码中作为变量 +name+ 出现。

我们可以通过调用这个新生成器的描述看出来 (别忘了把之前的生成器文件删掉)

<shell>
$ rails generate initializer --help
Usage:
  rails generate initializer NAME [options]
</shell>

我们还看到新的生成器拥有一个名为 +source_root+ 的类方法。这个方法指出我们的生成器模板在存放的位置 (如果有的话)，默认它指向被创建的目录 +lib/generators/initializer/templates+ 。

为了理解生成器模板的意义，让我们创建文件 +lib/generators/initializer/templates/initializer.rb+ ，其内容如下：

<ruby>
# Add initialization content here
</ruby>

现在让我们修改生成器使其被调用时拷贝这个模板：

<ruby>
class InitializerGenerator < Rails::Generators::NamedBase
  source_root File.expand_path("../templates", __FILE__)

  def copy_initializer_file
    copy_file "initializer.rb", "config/initializers/#{file_name}.rb"
  end
end
</ruby>

来执行我们的生成器：

<shell>
$ rails generate initializer core_extensions
</shell>

我们可以看到现在一个名为core_extensions的initializer被创建在 +config/initializers/core_extensions.rb+ ，内容与我们模板中的相同。这意味着 +copy_file+ 方法拷贝了一个我们的原始文件到了给定的目标路径。当我们继承了 +Rails::Generators::NamedBase+ , 方法 +file_name+ 被自动创建。

本指南的 "final section":#9 涵盖了更多生成器可用方法。

h3. 生成器查找

当您运行 +rails generate initializer core_extensions+ Rails 挨个儿引入这些文件直到生成器被发现为止：

<shell>
rails/generators/initializer/initializer_generator.rb
generators/initializer/initializer_generator.rb
rails/generators/initializer_generator.rb
generators/initializer_generator.rb
</shell>

如果没找到生成器您将收到一条错误信息。

INFO: 之前示例中将生成器文件放在应用的 +lib+ 目录下是因为这个目录属于 +$LOAD_PATH+

h3. 定制您的工作流程

Rails 自带的生成器提供足够的可定制性，让您定制脚手架 (scaffolding)。它们在可以在 +config/application.rb+ 中被配置， 以下是默认配置:

<ruby>
config.generators do |g|
  g.orm             :active_record
  g.template_engine :erb
  g.test_framework  :test_unit, :fixture => true
end
</ruby>

在定制工作流程前，一块先看我们的scaffold是什么样的:

<shell>
$ rails generate scaffold User name:string
      invoke  active_record
      create    db/migrate/20091120125558_create_users.rb
      create    app/models/user.rb
      invoke    test_unit
      create      test/unit/user_test.rb
      create      test/fixtures/users.yml
       route  resources :users
      invoke  scaffold_controller
      create    app/controllers/users_controller.rb
      invoke    erb
      create      app/views/users
      create      app/views/users/index.html.erb
      create      app/views/users/edit.html.erb
      create      app/views/users/show.html.erb
      create      app/views/users/new.html.erb
      create      app/views/users/_form.html.erb
      invoke    test_unit
      create      test/functional/users_controller_test.rb
      invoke    helper
      create      app/helpers/users_helper.rb
      invoke      test_unit
      create        test/unit/helpers/users_helper_test.rb
      invoke  stylesheets
      create    app/assets/stylesheets/scaffold.css
</shell>

对照输出，很容易理解生成器在Rails 3.0及之前的版本是如何工作的。scaffold生成器实际上不生成任何东西，它只调用其它的生成器工作。这样就允许我们 添加、修改、删除 这些调用。例如，scaffold生成器调用scaffold_controller生成器, 从而调用erb、test_unit和helper生成器。从每个生成器的单一职责，它们极易重用，避免了重复代码。

我们的第一个工作流程定制将阻止为scaffolds生成样式表和测试夹具。可以通过修改我们的工作流程config来实现：

<ruby>
config.generators do |g|
  g.orm             :active_record
  g.template_engine :erb
  g.test_framework  :test_unit, :fixture => false
  g.stylesheets     false
end
</ruby>

如果我们要让scaffold生成另一个resource，可以看到样式表和测试夹具没有再被生成。如果您想定制进一步定制scaffold生成器，例如用DataMapper和RSpec 替代 Active Record和TestUnit，只需要添加这两个gem到您应用里，然后配置您的生成器。

示范一下，我们将创建一个新的helper生成器，它可以简单添加一些实例变量reader。首先，我们在rails命名空间下创建一个生成器，以便rails能够搜索到生成器：

<shell>
$ rails generate generator rails/my_helper
</shell>


之后，我们可以从新的生成器里删掉 +templates+ 目录和 +source_root+ 类方法，因为我们不需要它们。现在我们的新生成器看起来就像这样：

<ruby>
class Rails::MyHelperGenerator < Rails::Generators::NamedBase
    def create_helper_file
        create_file "app/helpers/#{file_name}_helper.rb", <<-FILE
            module #{class_name}Helper
            attr_reader :#{plural_name}, :#{plural_name.singularize}
        end
        FILE
    end
end
</ruby>

我们可以试一下新生成器来生成为products (一个resource)一个helper

<shell>
$ rails generate my_helper products
</shell>

它会在 +app/helpers+ 目录下生成一下的helper文件:

<ruby>
module ProductsHelper
  attr_reader :products, :product
end
</ruby>

正是我们期望的那样。现在我们可以再一次通过编辑 +config/application.rb+  指挥scaffold使用我们的新生成器了。

<ruby>
config.generators do |g|
  g.orm             :active_record
  g.template_engine :erb
  g.test_framework  :test_unit, :fixture => false
  g.stylesheets     false
  g.helper          :my_helper
end
</ruby>

调用scaffold生成器就可以看到my_helper起效了：

<shell>
$ rails generate scaffold Post body:text
      [...]
      invoke    my_helper
      create      app/helpers/posts_helper.rb
</shell>

我们可以在输出上提示新生成器替代了Rails默认的。然而有个事儿忘了，还没生成helper的测试呢，我们要重用原来的helper测试生成器。

从Rails 3.0开始，这事由于钩子机制 (hooks concept) 变得很容易了。我们的新helper无需关注特定的测试框架，它可以方便地提供一个hook，测试框架只需实现这个hook就可以兼容。

我们这样可以修改生成器：

<ruby>
class Rails::MyHelperGenerator < Rails::Generators::NamedBase
    def create_helper_file
       create_file "app/helpers/#{file_name}_helper.rb", <<-FILE
           module #{class_name}Helper
               attr_reader :#{plural_name}, :#{plural_name.singularize}
           end
       FILE
    end

    hook_for :test_framework
end
</ruby>

现在，当helper生成器被调用，假设TestUnit被配置为测试框架，它将尝试调用 +Rails::TestUnitGenerator+ 和 +TestUnit::MyHelperGenerator+。由于这些没有被定义，我们可以告诉我们的生成器调用 +TestUnit::Generators::HelperGenerator+ 替代之，因为它是定义的Rails生成器。我们只需要添加：

<ruby>
# Search for :helper instead of :my_helper
hook_for :test_framework, :as => :helper
</ruby>

现在您可以重新运行scaffold生成另一个resource，并且看到它同时生成了测试！

h3. 通过修改生成器模板定制您的工作流程

上一步我们简单地给生成的helper添了一行代码，没有添加什么额外功能。有个更简单的方法也能做到，即更换已存在生成器的模板，以 +Rails::Generators::HelperGenerator+ 为例。

在Rails 3.0 及之前版本，生成器不止在源目录搜索模板，它们也在其它的路径搜索。+lib/templates+ 就是其中之一 。由于我们想定制 +Rails::Generators::HelperGenerator+ ，我们能够简单地通过制作在 +lib/templates/rails/helper+ 下名为 +helper.rb+ 的模板副本来做到。其内容如下：

<erb>
module <%= class_name %>Helper
  attr_reader :<%= plural_name %>, <%= plural_name.singularize %>
end
</erb>

复原 +config/application.rb+ 的最后一次修改：

<ruby>
config.generators do |g|
  g.orm             :active_record
  g.template_engine :erb
  g.test_framework  :test_unit, :fixture => false
  g.stylesheets     false
end
</ruby>

如果您生成另一个resource，您将能够看到我们可以达到同样的效果！如果您想定仅通过创建 +lib/templates/erb/scaffold+ 目录下 +edit.html.erb+, +index.html.erb+ 等等，定制您的scaffold模板和（或者）结构，这个方法会很有用。

h3. 添加生成器回退

关于生成器的最后一个特性对于插件中的生成器尤为有用，这就是 +回退+ 。举例来说，想象一下您想要在TestUint上添加一个特性，就如 "shoulda":https://github.com/thoughtbot/shoulda 做的那样。由于TestUnit已经实现了Rails所要求的所有生成器，shoulda覆盖部分生成器，shoulda无需重新实现一些生成器，可以简单地告知Rails 如果在 +Shoulda+ 命名空间下查无所获就使用 +TestUnit+ 生成器。

我们通过再次修改 +config/application.rb+ 可以简单地模拟这个行为：

<ruby>
config.generators do |g|
  g.orm             :active_record
  g.template_engine :erb
  g.test_framework  :shoulda, :fixture => false
  g.stylesheets     false

  # Add a fallback!
  g.fallbacks[:shoulda] = :test_unit
end
</ruby>

现在， 如果您创建一个 Comment (译注：resource名) scaffold， 你将看到shoulda生成器被调用了，并且最终，它们只是回退到了TestUnit生成器：

<shell>
$ rails generate scaffold Comment body:text
      invoke  active_record
      create    db/migrate/20091120151323_create_comments.rb
      create    app/models/comment.rb
      invoke    shoulda
      create      test/unit/comment_test.rb
      create      test/fixtures/comments.yml
       route    resources :comments
      invoke  scaffold_controller
      create    app/controllers/comments_controller.rb
      invoke    erb
      create      app/views/comments
      create      app/views/comments/index.html.erb
      create      app/views/comments/edit.html.erb
      create      app/views/comments/show.html.erb
      create      app/views/comments/new.html.erb
      create      app/views/comments/_form.html.erb
      create      app/views/layouts/comments.html.erb
      invoke    shoulda
      create      test/functional/comments_controller_test.rb
      invoke    my_helper
      create      app/helpers/comments_helper.rb
      invoke      shoulda
      create        test/unit/helpers/comments_helper_test.rb
</shell>

回退允许您的生成器拥有单一的职责，增强了代码复用和减少了重复。

h3. 应用程序模板

现在您已经了解了生成器是如何在 _应用内_ 被使用的，您是否知道它们一样可以用来 _生成应用_ 呢? 这样一类生成器被成为 "应用程序模板" (译注：原文使用template，但和前文中的模板文件意义不同故酌情意译)。

<ruby>
gem("rspec-rails", :group => "test")
gem("cucumber-rails", :group => "test")

if yes?("Would you like to install Devise?")
  gem("devise")
  generate("devise:install")
  model_name = ask("What would you like the user model to be called? [user]")
  model_name = "user" if model_name.blank?
  generate("devise", model_name)
end
</ruby>

上面这个应用模板中我们指定应用依赖 +rspec-rails+ 和 +cucumber-rails+ 这两个gem，所以这个两个gem被加到了 +Gemfile+ 的 +test+ 组下。然后您提出问题问用户是不是要安装 Devise 。如果用户回复 "y" 或者 "yes"，应用程序模板会添加 Devise 到 +Gemfile+ 在所有组之外，之后运行 +devise:install+ 生成器。这个应用程序模板接着让用户回答最后一个问题，传给这个生成器输入和运行 +devise+ 生成器

想象这个应用程序模板保存在 +template.rb+ 文件中。我们可以通过 +-m+ 选项传文件名来修改 +rails new+  命令的产生结果。

<shell>
$ rails new thud -m template.rb
</shell>

这个命令将生成 +Thud+ 应用，并依照应用程序模板生成输出。

应用程序模板不必存放在本地系统中，+-m+ 选项也支持在线的模板：

<shell>
$ rails new thud -m https://gist.github.com/722911.txt
</shell>

虽然本指南的终章不涵盖如何写出人类已知的最凶残的应用程序模板，它会带给您过一遍可用的方法，这样您就能自个开发了。这些方法对生成器同样适用。

h3. 生成器方法大全

接下来的方法对Rails生成器和应用程序模板通吃。

NOTE: 这些方法未涵盖Thor所提供的全部，详见 "Thor's documentation":http://rdoc.info/github/wycats/thor/master/Thor/Actions.html

h4. +gem+

指定一个应用的gem依赖

<ruby>
gem("rspec", :group => "test", :version => "2.1.0")
gem("devise", "1.1.5")
</ruby>

可用选项：

* +:group+ - 这个gem会放到 +Gemfile+ 的哪个组里去。 
* +:version+ - 您想使用的gem的版本字符串。也可指定这个方法的第二个参数。 
* +:git+ -  gem的git库URL。

任何传给方法的附加选项都放在行尾。

<ruby>
gem("devise", :git => "git://github.com/plataformatec/devise", :branch => "master")
</ruby>

以上的代码将在 +Gemfile+ 里添加如下一行：

<ruby>
gem "devise", :git => "git://github.com/plataformatec/devise", :branch => "master"
</ruby>

h4. +gem_group+

包裹gem 在一个组里

<ruby>
gem_group :development, :test do
  gem "rspec-rails"
end
</ruby>

h4. +add_source+

添加指定的gem源到 +Gemfile+

<ruby>
add_source "http://gems.github.com"
</ruby>

h4. +application+

直接添加一行代码到 +config/application.rb+ 的应用类定之后。

<ruby>
application "config.asset_host = 'http://example.com'"
</ruby>

这个方法还可以带一个block:

<ruby>
application do
  "config.asset_host = 'http://example.com'"
end
</ruby>

可用的选项如下:

* +:env+ - 为这个配置指定一个环境。如果您希望和block语法一块使用这个选项，下面是推荐的写法：

<ruby>
application(nil, :env => "development") do
  "config.asset_host = 'http://localhost:3000'"
end
</ruby>

h4. +git+

运行一条指定的git命令：

<ruby>
git :init
git :add => "."
git :commit => "-m First commit!"
git :add => "onefile.rb", :rm => "badfile.cxx"
</ruby>

这里的hash值属于参数或是传给指定git命令的选项。如最后一个示例，多个git命令可以一块指定，但是不保证它们会按指定顺序执行。

h4. +vendor+

在 +vendor+ 目录下放一个包含特定代码的文件

<ruby>
vendor("sekrit.rb", '#top secret stuff')
</ruby>

这个方法同样可以带block:

<ruby>
vendor("seeds.rb") do
  "puts 'in ur app, seeding ur database'"
end
</ruby>

h4. +lib+

在 +lib+ 目录下放一个包含特定代码的文件

<ruby>
lib("special.rb", 'p Rails.root')
</ruby>

这个方法同样可以带block:

<ruby>
lib("super_special.rb") do
  puts "Super special!"
end
</ruby>

h4. +rakefile+

在应用的 +lib/tasks+ 目录下创建一个Rake文件

<ruby>
rakefile("test.rake", 'hello there')
</ruby>

这个方法还是可以带block:

<ruby>
rakefile("test.rake") do
  %Q{
    task :rock => :environment do
      puts "Rockin'"
    end
  }
end
</ruby>

h4. +initializer+

在应用的 +config/initializers+ 目录下创建一个initializer文件

<ruby>
initializer("begin.rb", "puts 'this is the beginning'")
</ruby>

这个方法还是可以带block:

<ruby>
initializer("begin.rb") do
  puts "Almost done!"
end
</ruby>

h4. +generate+

运行指定的生成器，第一个参数事生成器名称，剩余的参数直接传给生成器。

<ruby>
generate("scaffold", "forums title:string description:text")
</ruby>


h4. +rake+

运行指定的Rake任务。

<ruby>
rake("db:migrate")
</ruby>

可用选项：

* +:env+ - 指定rake任务运行的环境。
* +:sudo+ - 是否使用 +sudo+ 运行这个任务。默认是 +false+

h4. +capify!+

在应该个目录下用Capistrano运行 +capify+ 命令，从而生成 Capistrano 配置。

<ruby>
capify!
</ruby>

h4. +route+

添加文本到 +config/routes.rb+ 文件：

<ruby>
route("resources :people")
</ruby>

h4. +readme+

输出在模板的 +source_path+ 下的文件内容，通常是一个 README

<ruby>
readme("README")
</ruby>
